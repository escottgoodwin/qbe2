# source: https://qbe1-c802843c00.herokuapp.com/database/dev
# timestamp: Wed May 15 2019 09:48:54 GMT-0700 (Pacific Daylight Time)

type AggregateAnswer {
  count: Int!
}

type AggregateAnswerChoice {
  count: Int!
}

type AggregateChallenge {
  count: Int!
}

type AggregateChallengeMessage {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateCourseInvite {
  count: Int!
}

type AggregateInstitution {
  count: Int!
}

type AggregatePanel {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionChoice {
  count: Int!
}

type AggregateResponseImage {
  count: Int!
}

type AggregateSequence {
  count: Int!
}

type AggregateTest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Answer implements Node {
  id: ID!
  answer: QuestionChoice!
  answerCorrect: Boolean
  addedBy: User!
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: User
  question: Question!
  challenge: Challenge
  answerChoices(where: AnswerChoiceWhereInput, orderBy: AnswerChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerChoice!]
}

type AnswerChoice implements Node {
  id: ID!
  choice: QuestionChoice!
  response: Boolean
  answer: Answer!
}

"""A connection to a list of items."""
type AnswerChoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerChoiceEdge]!
  aggregate: AggregateAnswerChoice!
}

input AnswerChoiceCreateInput {
  response: Boolean
  choice: QuestionChoiceCreateOneWithoutAnswerChoicesInput!
  answer: AnswerCreateOneWithoutAnswerChoicesInput!
}

input AnswerChoiceCreateManyWithoutAnswerInput {
  create: [AnswerChoiceCreateWithoutAnswerInput!]
  connect: [AnswerChoiceWhereUniqueInput!]
}

input AnswerChoiceCreateManyWithoutChoiceInput {
  create: [AnswerChoiceCreateWithoutChoiceInput!]
  connect: [AnswerChoiceWhereUniqueInput!]
}

input AnswerChoiceCreateWithoutAnswerInput {
  response: Boolean
  choice: QuestionChoiceCreateOneWithoutAnswerChoicesInput!
}

input AnswerChoiceCreateWithoutChoiceInput {
  response: Boolean
  answer: AnswerCreateOneWithoutAnswerChoicesInput!
}

"""An edge in a connection."""
type AnswerChoiceEdge {
  """The item at the end of the edge."""
  node: AnswerChoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerChoiceOrderByInput {
  id_ASC
  id_DESC
  response_ASC
  response_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerChoicePreviousValues {
  id: ID!
  response: Boolean
}

input AnswerChoiceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerChoiceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerChoiceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerChoiceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  response: Boolean

  """All values that are not equal to given value."""
  response_not: Boolean
}

type AnswerChoiceSubscriptionPayload {
  mutation: MutationType!
  node: AnswerChoice
  updatedFields: [String!]
  previousValues: AnswerChoicePreviousValues
}

input AnswerChoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerChoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerChoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerChoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerChoiceWhereInput
}

input AnswerChoiceUpdateInput {
  response: Boolean
  choice: QuestionChoiceUpdateOneRequiredWithoutAnswerChoicesInput
  answer: AnswerUpdateOneRequiredWithoutAnswerChoicesInput
}

input AnswerChoiceUpdateManyDataInput {
  response: Boolean
}

input AnswerChoiceUpdateManyMutationInput {
  response: Boolean
}

input AnswerChoiceUpdateManyWithoutAnswerInput {
  create: [AnswerChoiceCreateWithoutAnswerInput!]
  connect: [AnswerChoiceWhereUniqueInput!]
  disconnect: [AnswerChoiceWhereUniqueInput!]
  delete: [AnswerChoiceWhereUniqueInput!]
  update: [AnswerChoiceUpdateWithWhereUniqueWithoutAnswerInput!]
  updateMany: [AnswerChoiceUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerChoiceScalarWhereInput!]
  upsert: [AnswerChoiceUpsertWithWhereUniqueWithoutAnswerInput!]
}

input AnswerChoiceUpdateManyWithoutChoiceInput {
  create: [AnswerChoiceCreateWithoutChoiceInput!]
  connect: [AnswerChoiceWhereUniqueInput!]
  disconnect: [AnswerChoiceWhereUniqueInput!]
  delete: [AnswerChoiceWhereUniqueInput!]
  update: [AnswerChoiceUpdateWithWhereUniqueWithoutChoiceInput!]
  updateMany: [AnswerChoiceUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerChoiceScalarWhereInput!]
  upsert: [AnswerChoiceUpsertWithWhereUniqueWithoutChoiceInput!]
}

input AnswerChoiceUpdateManyWithWhereNestedInput {
  where: AnswerChoiceScalarWhereInput!
  data: AnswerChoiceUpdateManyDataInput!
}

input AnswerChoiceUpdateWithoutAnswerDataInput {
  response: Boolean
  choice: QuestionChoiceUpdateOneRequiredWithoutAnswerChoicesInput
}

input AnswerChoiceUpdateWithoutChoiceDataInput {
  response: Boolean
  answer: AnswerUpdateOneRequiredWithoutAnswerChoicesInput
}

input AnswerChoiceUpdateWithWhereUniqueWithoutAnswerInput {
  where: AnswerChoiceWhereUniqueInput!
  data: AnswerChoiceUpdateWithoutAnswerDataInput!
}

input AnswerChoiceUpdateWithWhereUniqueWithoutChoiceInput {
  where: AnswerChoiceWhereUniqueInput!
  data: AnswerChoiceUpdateWithoutChoiceDataInput!
}

input AnswerChoiceUpsertWithWhereUniqueWithoutAnswerInput {
  where: AnswerChoiceWhereUniqueInput!
  update: AnswerChoiceUpdateWithoutAnswerDataInput!
  create: AnswerChoiceCreateWithoutAnswerInput!
}

input AnswerChoiceUpsertWithWhereUniqueWithoutChoiceInput {
  where: AnswerChoiceWhereUniqueInput!
  update: AnswerChoiceUpdateWithoutChoiceDataInput!
  create: AnswerChoiceCreateWithoutChoiceInput!
}

input AnswerChoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerChoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerChoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerChoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  response: Boolean

  """All values that are not equal to given value."""
  response_not: Boolean
  choice: QuestionChoiceWhereInput
  answer: AnswerWhereInput
}

input AnswerChoiceWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type AnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  addedBy: UserCreateOneWithoutAnswersInput!
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionAnswersInput!
  challenge: ChallengeCreateOneWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutAnswerInput
}

input AnswerCreateManyWithoutAddedByInput {
  create: [AnswerCreateWithoutAddedByInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutAnswerInput {
  create: [AnswerCreateWithoutAnswerInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateManyWithoutUpdatedByInput {
  create: [AnswerCreateWithoutUpdatedByInput!]
  connect: [AnswerWhereUniqueInput!]
}

input AnswerCreateOneWithoutAnswerChoicesInput {
  create: AnswerCreateWithoutAnswerChoicesInput
  connect: AnswerWhereUniqueInput
}

input AnswerCreateOneWithoutChallengeInput {
  create: AnswerCreateWithoutChallengeInput
  connect: AnswerWhereUniqueInput
}

input AnswerCreateWithoutAddedByInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionAnswersInput!
  challenge: ChallengeCreateOneWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutAnswerInput
}

input AnswerCreateWithoutAnswerChoicesInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  addedBy: UserCreateOneWithoutAnswersInput!
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionAnswersInput!
  challenge: ChallengeCreateOneWithoutAnswerInput
}

input AnswerCreateWithoutAnswerInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutAnswersInput!
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionAnswersInput!
  challenge: ChallengeCreateOneWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutAnswerInput
}

input AnswerCreateWithoutChallengeInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  addedBy: UserCreateOneWithoutAnswersInput!
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  question: QuestionCreateOneWithoutQuestionAnswersInput!
  answerChoices: AnswerChoiceCreateManyWithoutAnswerInput
}

input AnswerCreateWithoutQuestionInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  addedBy: UserCreateOneWithoutAnswersInput!
  updatedBy: UserCreateOneWithoutAnswerUpdatesInput
  challenge: ChallengeCreateOneWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutAnswerInput
}

input AnswerCreateWithoutUpdatedByInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceCreateOneWithoutAnswersInput!
  addedBy: UserCreateOneWithoutAnswersInput!
  question: QuestionCreateOneWithoutQuestionAnswersInput!
  challenge: ChallengeCreateOneWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutAnswerInput
}

"""An edge in a connection."""
type AnswerEdge {
  """The item at the end of the edge."""
  node: Answer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  answerCorrect_ASC
  answerCorrect_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input AnswerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  answerCorrect: Boolean

  """All values that are not equal to given value."""
  answerCorrect_not: Boolean
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  addedBy: UserUpdateOneRequiredWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionAnswersInput
  challenge: ChallengeUpdateOneWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutAnswerInput
}

input AnswerUpdateManyDataInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input AnswerUpdateManyMutationInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input AnswerUpdateManyWithoutAddedByInput {
  create: [AnswerCreateWithoutAddedByInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAddedByInput!]
}

input AnswerUpdateManyWithoutAnswerInput {
  create: [AnswerCreateWithoutAnswerInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAnswerInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAnswerInput!]
}

input AnswerUpdateManyWithoutQuestionInput {
  create: [AnswerCreateWithoutQuestionInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutQuestionInput!]
}

input AnswerUpdateManyWithoutUpdatedByInput {
  create: [AnswerCreateWithoutUpdatedByInput!]
  connect: [AnswerWhereUniqueInput!]
  disconnect: [AnswerWhereUniqueInput!]
  delete: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [AnswerUpdateManyWithWhereNestedInput!]
  deleteMany: [AnswerScalarWhereInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput!
  data: AnswerUpdateManyDataInput!
}

input AnswerUpdateOneRequiredWithoutAnswerChoicesInput {
  create: AnswerCreateWithoutAnswerChoicesInput
  connect: AnswerWhereUniqueInput
  update: AnswerUpdateWithoutAnswerChoicesDataInput
  upsert: AnswerUpsertWithoutAnswerChoicesInput
}

input AnswerUpdateOneWithoutChallengeInput {
  create: AnswerCreateWithoutChallengeInput
  connect: AnswerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AnswerUpdateWithoutChallengeDataInput
  upsert: AnswerUpsertWithoutChallengeInput
}

input AnswerUpdateWithoutAddedByDataInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionAnswersInput
  challenge: ChallengeUpdateOneWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutAnswerInput
}

input AnswerUpdateWithoutAnswerChoicesDataInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  addedBy: UserUpdateOneRequiredWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionAnswersInput
  challenge: ChallengeUpdateOneWithoutAnswerInput
}

input AnswerUpdateWithoutAnswerDataInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionAnswersInput
  challenge: ChallengeUpdateOneWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutAnswerInput
}

input AnswerUpdateWithoutChallengeDataInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  addedBy: UserUpdateOneRequiredWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  question: QuestionUpdateOneRequiredWithoutQuestionAnswersInput
  answerChoices: AnswerChoiceUpdateManyWithoutAnswerInput
}

input AnswerUpdateWithoutQuestionDataInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  addedBy: UserUpdateOneRequiredWithoutAnswersInput
  updatedBy: UserUpdateOneWithoutAnswerUpdatesInput
  challenge: ChallengeUpdateOneWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutAnswerInput
}

input AnswerUpdateWithoutUpdatedByDataInput {
  answerCorrect: Boolean
  addedDate: DateTime
  updateDate: DateTime
  answer: QuestionChoiceUpdateOneRequiredWithoutAnswersInput
  addedBy: UserUpdateOneRequiredWithoutAnswersInput
  question: QuestionUpdateOneRequiredWithoutQuestionAnswersInput
  challenge: ChallengeUpdateOneWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutAnswerInput
}

input AnswerUpdateWithWhereUniqueWithoutAddedByInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAddedByDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutAnswerInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutAnswerDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutQuestionDataInput!
}

input AnswerUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: AnswerWhereUniqueInput!
  data: AnswerUpdateWithoutUpdatedByDataInput!
}

input AnswerUpsertWithoutAnswerChoicesInput {
  update: AnswerUpdateWithoutAnswerChoicesDataInput!
  create: AnswerCreateWithoutAnswerChoicesInput!
}

input AnswerUpsertWithoutChallengeInput {
  update: AnswerUpdateWithoutChallengeDataInput!
  create: AnswerCreateWithoutChallengeInput!
}

input AnswerUpsertWithWhereUniqueWithoutAddedByInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAddedByDataInput!
  create: AnswerCreateWithoutAddedByInput!
}

input AnswerUpsertWithWhereUniqueWithoutAnswerInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutAnswerDataInput!
  create: AnswerCreateWithoutAnswerInput!
}

input AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutQuestionDataInput!
  create: AnswerCreateWithoutQuestionInput!
}

input AnswerUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: AnswerWhereUniqueInput!
  update: AnswerUpdateWithoutUpdatedByDataInput!
  create: AnswerCreateWithoutUpdatedByInput!
}

input AnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  answerCorrect: Boolean

  """All values that are not equal to given value."""
  answerCorrect_not: Boolean
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  answer: QuestionChoiceWhereInput
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  question: QuestionWhereInput
  challenge: ChallengeWhereInput
  answerChoices_every: AnswerChoiceWhereInput
  answerChoices_some: AnswerChoiceWhereInput
  answerChoices_none: AnswerChoiceWhereInput
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Challenge implements Node {
  id: ID!
  challenge: String
  addedBy: User!
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: User
  question: Question
  answer: Answer
  challengeMessages(where: ChallengeMessageWhereInput, orderBy: ChallengeMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeMessage!]
}

"""A connection to a list of items."""
type ChallengeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutChallengesInput!
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
  question: QuestionCreateOneWithoutChallengesInput
  answer: AnswerCreateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageCreateManyWithoutChallengeInput
}

input ChallengeCreateManyWithoutAddedByInput {
  create: [ChallengeCreateWithoutAddedByInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutQuestionInput {
  create: [ChallengeCreateWithoutQuestionInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutUpdatedByInput {
  create: [ChallengeCreateWithoutUpdatedByInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateOneWithoutAnswerInput {
  create: ChallengeCreateWithoutAnswerInput
  connect: ChallengeWhereUniqueInput
}

input ChallengeCreateOneWithoutChallengeMessagesInput {
  create: ChallengeCreateWithoutChallengeMessagesInput
  connect: ChallengeWhereUniqueInput
}

input ChallengeCreateWithoutAddedByInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
  question: QuestionCreateOneWithoutChallengesInput
  answer: AnswerCreateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageCreateManyWithoutChallengeInput
}

input ChallengeCreateWithoutAnswerInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutChallengesInput!
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
  question: QuestionCreateOneWithoutChallengesInput
  challengeMessages: ChallengeMessageCreateManyWithoutChallengeInput
}

input ChallengeCreateWithoutChallengeMessagesInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutChallengesInput!
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
  question: QuestionCreateOneWithoutChallengesInput
  answer: AnswerCreateOneWithoutChallengeInput
}

input ChallengeCreateWithoutQuestionInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutChallengesInput!
  updatedBy: UserCreateOneWithoutChallengeUpdatesInput
  answer: AnswerCreateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageCreateManyWithoutChallengeInput
}

input ChallengeCreateWithoutUpdatedByInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutChallengesInput!
  question: QuestionCreateOneWithoutChallengesInput
  answer: AnswerCreateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageCreateManyWithoutChallengeInput
}

"""An edge in a connection."""
type ChallengeEdge {
  """The item at the end of the edge."""
  node: Challenge!

  """A cursor for use in pagination."""
  cursor: String!
}

type ChallengeMessage implements Node {
  id: ID!
  challengeMessage: String
  addedBy: User!
  addedDate: DateTime
  challenge: Challenge!
}

"""A connection to a list of items."""
type ChallengeMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeMessageEdge]!
  aggregate: AggregateChallengeMessage!
}

input ChallengeMessageCreateInput {
  challengeMessage: String
  addedDate: DateTime
  addedBy: UserCreateOneWithoutChallengeMessagesAddedInput!
  challenge: ChallengeCreateOneWithoutChallengeMessagesInput!
}

input ChallengeMessageCreateManyWithoutAddedByInput {
  create: [ChallengeMessageCreateWithoutAddedByInput!]
  connect: [ChallengeMessageWhereUniqueInput!]
}

input ChallengeMessageCreateManyWithoutChallengeInput {
  create: [ChallengeMessageCreateWithoutChallengeInput!]
  connect: [ChallengeMessageWhereUniqueInput!]
}

input ChallengeMessageCreateWithoutAddedByInput {
  challengeMessage: String
  addedDate: DateTime
  challenge: ChallengeCreateOneWithoutChallengeMessagesInput!
}

input ChallengeMessageCreateWithoutChallengeInput {
  challengeMessage: String
  addedDate: DateTime
  addedBy: UserCreateOneWithoutChallengeMessagesAddedInput!
}

"""An edge in a connection."""
type ChallengeMessageEdge {
  """The item at the end of the edge."""
  node: ChallengeMessage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChallengeMessageOrderByInput {
  id_ASC
  id_DESC
  challengeMessage_ASC
  challengeMessage_DESC
  addedDate_ASC
  addedDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChallengeMessagePreviousValues {
  id: ID!
  challengeMessage: String
  addedDate: DateTime
}

input ChallengeMessageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeMessageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeMessageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeMessageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  challengeMessage: String

  """All values that are not equal to given value."""
  challengeMessage_not: String

  """All values that are contained in given list."""
  challengeMessage_in: [String!]

  """All values that are not contained in given list."""
  challengeMessage_not_in: [String!]

  """All values less than the given value."""
  challengeMessage_lt: String

  """All values less than or equal the given value."""
  challengeMessage_lte: String

  """All values greater than the given value."""
  challengeMessage_gt: String

  """All values greater than or equal the given value."""
  challengeMessage_gte: String

  """All values containing the given string."""
  challengeMessage_contains: String

  """All values not containing the given string."""
  challengeMessage_not_contains: String

  """All values starting with the given string."""
  challengeMessage_starts_with: String

  """All values not starting with the given string."""
  challengeMessage_not_starts_with: String

  """All values ending with the given string."""
  challengeMessage_ends_with: String

  """All values not ending with the given string."""
  challengeMessage_not_ends_with: String
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
}

type ChallengeMessageSubscriptionPayload {
  mutation: MutationType!
  node: ChallengeMessage
  updatedFields: [String!]
  previousValues: ChallengeMessagePreviousValues
}

input ChallengeMessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeMessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeMessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeMessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeMessageWhereInput
}

input ChallengeMessageUpdateInput {
  challengeMessage: String
  addedDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutChallengeMessagesAddedInput
  challenge: ChallengeUpdateOneRequiredWithoutChallengeMessagesInput
}

input ChallengeMessageUpdateManyDataInput {
  challengeMessage: String
  addedDate: DateTime
}

input ChallengeMessageUpdateManyMutationInput {
  challengeMessage: String
  addedDate: DateTime
}

input ChallengeMessageUpdateManyWithoutAddedByInput {
  create: [ChallengeMessageCreateWithoutAddedByInput!]
  connect: [ChallengeMessageWhereUniqueInput!]
  disconnect: [ChallengeMessageWhereUniqueInput!]
  delete: [ChallengeMessageWhereUniqueInput!]
  update: [ChallengeMessageUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [ChallengeMessageUpdateManyWithWhereNestedInput!]
  deleteMany: [ChallengeMessageScalarWhereInput!]
  upsert: [ChallengeMessageUpsertWithWhereUniqueWithoutAddedByInput!]
}

input ChallengeMessageUpdateManyWithoutChallengeInput {
  create: [ChallengeMessageCreateWithoutChallengeInput!]
  connect: [ChallengeMessageWhereUniqueInput!]
  disconnect: [ChallengeMessageWhereUniqueInput!]
  delete: [ChallengeMessageWhereUniqueInput!]
  update: [ChallengeMessageUpdateWithWhereUniqueWithoutChallengeInput!]
  updateMany: [ChallengeMessageUpdateManyWithWhereNestedInput!]
  deleteMany: [ChallengeMessageScalarWhereInput!]
  upsert: [ChallengeMessageUpsertWithWhereUniqueWithoutChallengeInput!]
}

input ChallengeMessageUpdateManyWithWhereNestedInput {
  where: ChallengeMessageScalarWhereInput!
  data: ChallengeMessageUpdateManyDataInput!
}

input ChallengeMessageUpdateWithoutAddedByDataInput {
  challengeMessage: String
  addedDate: DateTime
  challenge: ChallengeUpdateOneRequiredWithoutChallengeMessagesInput
}

input ChallengeMessageUpdateWithoutChallengeDataInput {
  challengeMessage: String
  addedDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutChallengeMessagesAddedInput
}

input ChallengeMessageUpdateWithWhereUniqueWithoutAddedByInput {
  where: ChallengeMessageWhereUniqueInput!
  data: ChallengeMessageUpdateWithoutAddedByDataInput!
}

input ChallengeMessageUpdateWithWhereUniqueWithoutChallengeInput {
  where: ChallengeMessageWhereUniqueInput!
  data: ChallengeMessageUpdateWithoutChallengeDataInput!
}

input ChallengeMessageUpsertWithWhereUniqueWithoutAddedByInput {
  where: ChallengeMessageWhereUniqueInput!
  update: ChallengeMessageUpdateWithoutAddedByDataInput!
  create: ChallengeMessageCreateWithoutAddedByInput!
}

input ChallengeMessageUpsertWithWhereUniqueWithoutChallengeInput {
  where: ChallengeMessageWhereUniqueInput!
  update: ChallengeMessageUpdateWithoutChallengeDataInput!
  create: ChallengeMessageCreateWithoutChallengeInput!
}

input ChallengeMessageWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeMessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeMessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeMessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  challengeMessage: String

  """All values that are not equal to given value."""
  challengeMessage_not: String

  """All values that are contained in given list."""
  challengeMessage_in: [String!]

  """All values that are not contained in given list."""
  challengeMessage_not_in: [String!]

  """All values less than the given value."""
  challengeMessage_lt: String

  """All values less than or equal the given value."""
  challengeMessage_lte: String

  """All values greater than the given value."""
  challengeMessage_gt: String

  """All values greater than or equal the given value."""
  challengeMessage_gte: String

  """All values containing the given string."""
  challengeMessage_contains: String

  """All values not containing the given string."""
  challengeMessage_not_contains: String

  """All values starting with the given string."""
  challengeMessage_starts_with: String

  """All values not starting with the given string."""
  challengeMessage_not_starts_with: String

  """All values ending with the given string."""
  challengeMessage_ends_with: String

  """All values not ending with the given string."""
  challengeMessage_not_ends_with: String
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  addedBy: UserWhereInput
  challenge: ChallengeWhereInput
}

input ChallengeMessageWhereUniqueInput {
  id: ID
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  challenge_ASC
  challenge_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChallengePreviousValues {
  id: ID!
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
}

input ChallengeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  challenge: String

  """All values that are not equal to given value."""
  challenge_not: String

  """All values that are contained in given list."""
  challenge_in: [String!]

  """All values that are not contained in given list."""
  challenge_not_in: [String!]

  """All values less than the given value."""
  challenge_lt: String

  """All values less than or equal the given value."""
  challenge_lte: String

  """All values greater than the given value."""
  challenge_gt: String

  """All values greater than or equal the given value."""
  challenge_gte: String

  """All values containing the given string."""
  challenge_contains: String

  """All values not containing the given string."""
  challenge_not_contains: String

  """All values starting with the given string."""
  challenge_starts_with: String

  """All values not starting with the given string."""
  challenge_not_starts_with: String

  """All values ending with the given string."""
  challenge_ends_with: String

  """All values not ending with the given string."""
  challenge_not_ends_with: String
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
}

input ChallengeUpdateInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutChallengesInput
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
  question: QuestionUpdateOneWithoutChallengesInput
  answer: AnswerUpdateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageUpdateManyWithoutChallengeInput
}

input ChallengeUpdateManyDataInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
}

input ChallengeUpdateManyMutationInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
}

input ChallengeUpdateManyWithoutAddedByInput {
  create: [ChallengeCreateWithoutAddedByInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutAddedByInput!]
}

input ChallengeUpdateManyWithoutQuestionInput {
  create: [ChallengeCreateWithoutQuestionInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutQuestionInput!]
}

input ChallengeUpdateManyWithoutUpdatedByInput {
  create: [ChallengeCreateWithoutUpdatedByInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input ChallengeUpdateManyWithWhereNestedInput {
  where: ChallengeScalarWhereInput!
  data: ChallengeUpdateManyDataInput!
}

input ChallengeUpdateOneRequiredWithoutChallengeMessagesInput {
  create: ChallengeCreateWithoutChallengeMessagesInput
  connect: ChallengeWhereUniqueInput
  update: ChallengeUpdateWithoutChallengeMessagesDataInput
  upsert: ChallengeUpsertWithoutChallengeMessagesInput
}

input ChallengeUpdateOneWithoutAnswerInput {
  create: ChallengeCreateWithoutAnswerInput
  connect: ChallengeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ChallengeUpdateWithoutAnswerDataInput
  upsert: ChallengeUpsertWithoutAnswerInput
}

input ChallengeUpdateWithoutAddedByDataInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
  question: QuestionUpdateOneWithoutChallengesInput
  answer: AnswerUpdateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageUpdateManyWithoutChallengeInput
}

input ChallengeUpdateWithoutAnswerDataInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutChallengesInput
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
  question: QuestionUpdateOneWithoutChallengesInput
  challengeMessages: ChallengeMessageUpdateManyWithoutChallengeInput
}

input ChallengeUpdateWithoutChallengeMessagesDataInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutChallengesInput
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
  question: QuestionUpdateOneWithoutChallengesInput
  answer: AnswerUpdateOneWithoutChallengeInput
}

input ChallengeUpdateWithoutQuestionDataInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutChallengesInput
  updatedBy: UserUpdateOneWithoutChallengeUpdatesInput
  answer: AnswerUpdateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageUpdateManyWithoutChallengeInput
}

input ChallengeUpdateWithoutUpdatedByDataInput {
  challenge: String
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutChallengesInput
  question: QuestionUpdateOneWithoutChallengesInput
  answer: AnswerUpdateOneWithoutChallengeInput
  challengeMessages: ChallengeMessageUpdateManyWithoutChallengeInput
}

input ChallengeUpdateWithWhereUniqueWithoutAddedByInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutAddedByDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutQuestionInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutQuestionDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutUpdatedByDataInput!
}

input ChallengeUpsertWithoutAnswerInput {
  update: ChallengeUpdateWithoutAnswerDataInput!
  create: ChallengeCreateWithoutAnswerInput!
}

input ChallengeUpsertWithoutChallengeMessagesInput {
  update: ChallengeUpdateWithoutChallengeMessagesDataInput!
  create: ChallengeCreateWithoutChallengeMessagesInput!
}

input ChallengeUpsertWithWhereUniqueWithoutAddedByInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutAddedByDataInput!
  create: ChallengeCreateWithoutAddedByInput!
}

input ChallengeUpsertWithWhereUniqueWithoutQuestionInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutQuestionDataInput!
  create: ChallengeCreateWithoutQuestionInput!
}

input ChallengeUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutUpdatedByDataInput!
  create: ChallengeCreateWithoutUpdatedByInput!
}

input ChallengeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  challenge: String

  """All values that are not equal to given value."""
  challenge_not: String

  """All values that are contained in given list."""
  challenge_in: [String!]

  """All values that are not contained in given list."""
  challenge_not_in: [String!]

  """All values less than the given value."""
  challenge_lt: String

  """All values less than or equal the given value."""
  challenge_lte: String

  """All values greater than the given value."""
  challenge_gt: String

  """All values greater than or equal the given value."""
  challenge_gte: String

  """All values containing the given string."""
  challenge_contains: String

  """All values not containing the given string."""
  challenge_not_contains: String

  """All values starting with the given string."""
  challenge_starts_with: String

  """All values not starting with the given string."""
  challenge_not_starts_with: String

  """All values ending with the given string."""
  challenge_ends_with: String

  """All values not ending with the given string."""
  challenge_not_ends_with: String
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  question: QuestionWhereInput
  answer: AnswerWhereInput
  challengeMessages_every: ChallengeMessageWhereInput
  challengeMessages_some: ChallengeMessageWhereInput
  challengeMessages_none: ChallengeMessageWhereInput
}

input ChallengeWhereUniqueInput {
  id: ID
}

type Course implements Node {
  id: ID!
  addedBy: User!
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: User
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  invitesSentBy: User
  institution: Institution!
  teachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  invitesSent(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  inviteCourses(where: CourseInviteWhereInput, orderBy: CourseInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseInvite!]
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateManyWithoutAddedByInput {
  create: [CourseCreateWithoutAddedByInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutInstitutionInput {
  create: [CourseCreateWithoutInstitutionInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutInvitesSentByInput {
  create: [CourseCreateWithoutInvitesSentByInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutInvitesSentInput {
  create: [CourseCreateWithoutInvitesSentInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutStudentsInput {
  create: [CourseCreateWithoutStudentsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutTeachersInput {
  create: [CourseCreateWithoutTeachersInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutUpdatedByInput {
  create: [CourseCreateWithoutUpdatedByInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutInviteCoursesInput {
  create: CourseCreateWithoutInviteCoursesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutTestsInput {
  create: CourseCreateWithoutTestsInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutAddedByInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateWithoutInstitutionInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateWithoutInviteCoursesInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
}

input CourseCreateWithoutInvitesSentByInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateWithoutInvitesSentInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateWithoutStudentsInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateWithoutTeachersInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateWithoutTestsInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  updatedBy: UserCreateOneWithoutCourseUpdatesInput
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

input CourseCreateWithoutUpdatedByInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserCreateOneWithoutCoursesAddedInput!
  invitesSentBy: UserCreateOneWithoutInvitesSentInput
  institution: InstitutionCreateOneWithoutCoursesInput!
  teachers: UserCreateManyWithoutTeacherCoursesInput
  students: UserCreateManyWithoutStudentCoursesInput
  tests: TestCreateManyWithoutCourseInput
  invitesSent: UserCreateManyWithoutInvitesInput
  inviteCourses: CourseInviteCreateManyWithoutCourseInput
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

type CourseInvite implements Node {
  id: ID!
  addedBy: User!
  addedDate: DateTime
  inviteSentTo: User!
  course: Course!
}

"""A connection to a list of items."""
type CourseInviteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseInviteEdge]!
  aggregate: AggregateCourseInvite!
}

input CourseInviteCreateInput {
  addedDate: DateTime
  addedBy: UserCreateOneWithoutAddedInvitesByInput!
  inviteSentTo: UserCreateOneWithoutInvitesSentToInput!
  course: CourseCreateOneWithoutInviteCoursesInput!
}

input CourseInviteCreateManyWithoutAddedByInput {
  create: [CourseInviteCreateWithoutAddedByInput!]
  connect: [CourseInviteWhereUniqueInput!]
}

input CourseInviteCreateManyWithoutCourseInput {
  create: [CourseInviteCreateWithoutCourseInput!]
  connect: [CourseInviteWhereUniqueInput!]
}

input CourseInviteCreateManyWithoutInviteSentToInput {
  create: [CourseInviteCreateWithoutInviteSentToInput!]
  connect: [CourseInviteWhereUniqueInput!]
}

input CourseInviteCreateWithoutAddedByInput {
  addedDate: DateTime
  inviteSentTo: UserCreateOneWithoutInvitesSentToInput!
  course: CourseCreateOneWithoutInviteCoursesInput!
}

input CourseInviteCreateWithoutCourseInput {
  addedDate: DateTime
  addedBy: UserCreateOneWithoutAddedInvitesByInput!
  inviteSentTo: UserCreateOneWithoutInvitesSentToInput!
}

input CourseInviteCreateWithoutInviteSentToInput {
  addedDate: DateTime
  addedBy: UserCreateOneWithoutAddedInvitesByInput!
  course: CourseCreateOneWithoutInviteCoursesInput!
}

"""An edge in a connection."""
type CourseInviteEdge {
  """The item at the end of the edge."""
  node: CourseInvite!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseInviteOrderByInput {
  id_ASC
  id_DESC
  addedDate_ASC
  addedDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CourseInvitePreviousValues {
  id: ID!
  addedDate: DateTime
}

input CourseInviteScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseInviteScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseInviteScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseInviteScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
}

type CourseInviteSubscriptionPayload {
  mutation: MutationType!
  node: CourseInvite
  updatedFields: [String!]
  previousValues: CourseInvitePreviousValues
}

input CourseInviteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseInviteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseInviteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseInviteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseInviteWhereInput
}

input CourseInviteUpdateInput {
  addedDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutAddedInvitesByInput
  inviteSentTo: UserUpdateOneRequiredWithoutInvitesSentToInput
  course: CourseUpdateOneRequiredWithoutInviteCoursesInput
}

input CourseInviteUpdateManyDataInput {
  addedDate: DateTime
}

input CourseInviteUpdateManyMutationInput {
  addedDate: DateTime
}

input CourseInviteUpdateManyWithoutAddedByInput {
  create: [CourseInviteCreateWithoutAddedByInput!]
  connect: [CourseInviteWhereUniqueInput!]
  disconnect: [CourseInviteWhereUniqueInput!]
  delete: [CourseInviteWhereUniqueInput!]
  update: [CourseInviteUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [CourseInviteUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseInviteScalarWhereInput!]
  upsert: [CourseInviteUpsertWithWhereUniqueWithoutAddedByInput!]
}

input CourseInviteUpdateManyWithoutCourseInput {
  create: [CourseInviteCreateWithoutCourseInput!]
  connect: [CourseInviteWhereUniqueInput!]
  disconnect: [CourseInviteWhereUniqueInput!]
  delete: [CourseInviteWhereUniqueInput!]
  update: [CourseInviteUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [CourseInviteUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseInviteScalarWhereInput!]
  upsert: [CourseInviteUpsertWithWhereUniqueWithoutCourseInput!]
}

input CourseInviteUpdateManyWithoutInviteSentToInput {
  create: [CourseInviteCreateWithoutInviteSentToInput!]
  connect: [CourseInviteWhereUniqueInput!]
  disconnect: [CourseInviteWhereUniqueInput!]
  delete: [CourseInviteWhereUniqueInput!]
  update: [CourseInviteUpdateWithWhereUniqueWithoutInviteSentToInput!]
  updateMany: [CourseInviteUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseInviteScalarWhereInput!]
  upsert: [CourseInviteUpsertWithWhereUniqueWithoutInviteSentToInput!]
}

input CourseInviteUpdateManyWithWhereNestedInput {
  where: CourseInviteScalarWhereInput!
  data: CourseInviteUpdateManyDataInput!
}

input CourseInviteUpdateWithoutAddedByDataInput {
  addedDate: DateTime
  inviteSentTo: UserUpdateOneRequiredWithoutInvitesSentToInput
  course: CourseUpdateOneRequiredWithoutInviteCoursesInput
}

input CourseInviteUpdateWithoutCourseDataInput {
  addedDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutAddedInvitesByInput
  inviteSentTo: UserUpdateOneRequiredWithoutInvitesSentToInput
}

input CourseInviteUpdateWithoutInviteSentToDataInput {
  addedDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutAddedInvitesByInput
  course: CourseUpdateOneRequiredWithoutInviteCoursesInput
}

input CourseInviteUpdateWithWhereUniqueWithoutAddedByInput {
  where: CourseInviteWhereUniqueInput!
  data: CourseInviteUpdateWithoutAddedByDataInput!
}

input CourseInviteUpdateWithWhereUniqueWithoutCourseInput {
  where: CourseInviteWhereUniqueInput!
  data: CourseInviteUpdateWithoutCourseDataInput!
}

input CourseInviteUpdateWithWhereUniqueWithoutInviteSentToInput {
  where: CourseInviteWhereUniqueInput!
  data: CourseInviteUpdateWithoutInviteSentToDataInput!
}

input CourseInviteUpsertWithWhereUniqueWithoutAddedByInput {
  where: CourseInviteWhereUniqueInput!
  update: CourseInviteUpdateWithoutAddedByDataInput!
  create: CourseInviteCreateWithoutAddedByInput!
}

input CourseInviteUpsertWithWhereUniqueWithoutCourseInput {
  where: CourseInviteWhereUniqueInput!
  update: CourseInviteUpdateWithoutCourseDataInput!
  create: CourseInviteCreateWithoutCourseInput!
}

input CourseInviteUpsertWithWhereUniqueWithoutInviteSentToInput {
  where: CourseInviteWhereUniqueInput!
  update: CourseInviteUpdateWithoutInviteSentToDataInput!
  create: CourseInviteCreateWithoutInviteSentToInput!
}

input CourseInviteWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseInviteWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseInviteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseInviteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  addedBy: UserWhereInput
  inviteSentTo: UserWhereInput
  course: CourseWhereInput
}

input CourseInviteWhereUniqueInput {
  id: ID
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  name_ASC
  name_DESC
  courseNumber_ASC
  courseNumber_DESC
  time_ASC
  time_DESC
  department1_ASC
  department1_DESC
  image_ASC
  image_DESC
  deleted_ASC
  deleted_DESC
  invitesSentDate_ASC
  invitesSentDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoursePreviousValues {
  id: ID!
  addedDate: DateTime
  updateDate: DateTime
  name: String!
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
}

input CourseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  courseNumber: String

  """All values that are not equal to given value."""
  courseNumber_not: String

  """All values that are contained in given list."""
  courseNumber_in: [String!]

  """All values that are not contained in given list."""
  courseNumber_not_in: [String!]

  """All values less than the given value."""
  courseNumber_lt: String

  """All values less than or equal the given value."""
  courseNumber_lte: String

  """All values greater than the given value."""
  courseNumber_gt: String

  """All values greater than or equal the given value."""
  courseNumber_gte: String

  """All values containing the given string."""
  courseNumber_contains: String

  """All values not containing the given string."""
  courseNumber_not_contains: String

  """All values starting with the given string."""
  courseNumber_starts_with: String

  """All values not starting with the given string."""
  courseNumber_not_starts_with: String

  """All values ending with the given string."""
  courseNumber_ends_with: String

  """All values not ending with the given string."""
  courseNumber_not_ends_with: String
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  department1: String

  """All values that are not equal to given value."""
  department1_not: String

  """All values that are contained in given list."""
  department1_in: [String!]

  """All values that are not contained in given list."""
  department1_not_in: [String!]

  """All values less than the given value."""
  department1_lt: String

  """All values less than or equal the given value."""
  department1_lte: String

  """All values greater than the given value."""
  department1_gt: String

  """All values greater than or equal the given value."""
  department1_gte: String

  """All values containing the given string."""
  department1_contains: String

  """All values not containing the given string."""
  department1_not_contains: String

  """All values starting with the given string."""
  department1_starts_with: String

  """All values not starting with the given string."""
  department1_not_starts_with: String

  """All values ending with the given string."""
  department1_ends_with: String

  """All values not ending with the given string."""
  department1_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  invitesSentDate: DateTime

  """All values that are not equal to given value."""
  invitesSentDate_not: DateTime

  """All values that are contained in given list."""
  invitesSentDate_in: [DateTime!]

  """All values that are not contained in given list."""
  invitesSentDate_not_in: [DateTime!]

  """All values less than the given value."""
  invitesSentDate_lt: DateTime

  """All values less than or equal the given value."""
  invitesSentDate_lte: DateTime

  """All values greater than the given value."""
  invitesSentDate_gt: DateTime

  """All values greater than or equal the given value."""
  invitesSentDate_gte: DateTime
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateManyDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
}

input CourseUpdateManyMutationInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
}

input CourseUpdateManyWithoutAddedByInput {
  create: [CourseCreateWithoutAddedByInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutAddedByInput!]
}

input CourseUpdateManyWithoutInstitutionInput {
  create: [CourseCreateWithoutInstitutionInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutInstitutionInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input CourseUpdateManyWithoutInvitesSentByInput {
  create: [CourseCreateWithoutInvitesSentByInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutInvitesSentByInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutInvitesSentByInput!]
}

input CourseUpdateManyWithoutInvitesSentInput {
  create: [CourseCreateWithoutInvitesSentInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutInvitesSentInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutInvitesSentInput!]
}

input CourseUpdateManyWithoutStudentsInput {
  create: [CourseCreateWithoutStudentsInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutStudentsInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutStudentsInput!]
}

input CourseUpdateManyWithoutTeachersInput {
  create: [CourseCreateWithoutTeachersInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutTeachersInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutTeachersInput!]
}

input CourseUpdateManyWithoutUpdatedByInput {
  create: [CourseCreateWithoutUpdatedByInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  deleteMany: [CourseScalarWhereInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateOneRequiredWithoutInviteCoursesInput {
  create: CourseCreateWithoutInviteCoursesInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutInviteCoursesDataInput
  upsert: CourseUpsertWithoutInviteCoursesInput
}

input CourseUpdateOneRequiredWithoutTestsInput {
  create: CourseCreateWithoutTestsInput
  connect: CourseWhereUniqueInput
  update: CourseUpdateWithoutTestsDataInput
  upsert: CourseUpsertWithoutTestsInput
}

input CourseUpdateWithoutAddedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutInstitutionDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutInviteCoursesDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
}

input CourseUpdateWithoutInvitesSentByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutInvitesSentDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutStudentsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutTeachersDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutTestsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  updatedBy: UserUpdateOneWithoutCourseUpdatesInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutUpdatedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  name: String
  courseNumber: String
  time: String
  department1: String
  image: String
  deleted: Boolean
  invitesSentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutCoursesAddedInput
  invitesSentBy: UserUpdateOneWithoutInvitesSentInput
  institution: InstitutionUpdateOneRequiredWithoutCoursesInput
  teachers: UserUpdateManyWithoutTeacherCoursesInput
  students: UserUpdateManyWithoutStudentCoursesInput
  tests: TestUpdateManyWithoutCourseInput
  invitesSent: UserUpdateManyWithoutInvitesInput
  inviteCourses: CourseInviteUpdateManyWithoutCourseInput
}

input CourseUpdateWithWhereUniqueWithoutAddedByInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutAddedByDataInput!
}

input CourseUpdateWithWhereUniqueWithoutInstitutionInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutInstitutionDataInput!
}

input CourseUpdateWithWhereUniqueWithoutInvitesSentByInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutInvitesSentByDataInput!
}

input CourseUpdateWithWhereUniqueWithoutInvitesSentInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutInvitesSentDataInput!
}

input CourseUpdateWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutStudentsDataInput!
}

input CourseUpdateWithWhereUniqueWithoutTeachersInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutTeachersDataInput!
}

input CourseUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutUpdatedByDataInput!
}

input CourseUpsertWithoutInviteCoursesInput {
  update: CourseUpdateWithoutInviteCoursesDataInput!
  create: CourseCreateWithoutInviteCoursesInput!
}

input CourseUpsertWithoutTestsInput {
  update: CourseUpdateWithoutTestsDataInput!
  create: CourseCreateWithoutTestsInput!
}

input CourseUpsertWithWhereUniqueWithoutAddedByInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutAddedByDataInput!
  create: CourseCreateWithoutAddedByInput!
}

input CourseUpsertWithWhereUniqueWithoutInstitutionInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutInstitutionDataInput!
  create: CourseCreateWithoutInstitutionInput!
}

input CourseUpsertWithWhereUniqueWithoutInvitesSentByInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutInvitesSentByDataInput!
  create: CourseCreateWithoutInvitesSentByInput!
}

input CourseUpsertWithWhereUniqueWithoutInvitesSentInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutInvitesSentDataInput!
  create: CourseCreateWithoutInvitesSentInput!
}

input CourseUpsertWithWhereUniqueWithoutStudentsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutStudentsDataInput!
  create: CourseCreateWithoutStudentsInput!
}

input CourseUpsertWithWhereUniqueWithoutTeachersInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutTeachersDataInput!
  create: CourseCreateWithoutTeachersInput!
}

input CourseUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutUpdatedByDataInput!
  create: CourseCreateWithoutUpdatedByInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  courseNumber: String

  """All values that are not equal to given value."""
  courseNumber_not: String

  """All values that are contained in given list."""
  courseNumber_in: [String!]

  """All values that are not contained in given list."""
  courseNumber_not_in: [String!]

  """All values less than the given value."""
  courseNumber_lt: String

  """All values less than or equal the given value."""
  courseNumber_lte: String

  """All values greater than the given value."""
  courseNumber_gt: String

  """All values greater than or equal the given value."""
  courseNumber_gte: String

  """All values containing the given string."""
  courseNumber_contains: String

  """All values not containing the given string."""
  courseNumber_not_contains: String

  """All values starting with the given string."""
  courseNumber_starts_with: String

  """All values not starting with the given string."""
  courseNumber_not_starts_with: String

  """All values ending with the given string."""
  courseNumber_ends_with: String

  """All values not ending with the given string."""
  courseNumber_not_ends_with: String
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  department1: String

  """All values that are not equal to given value."""
  department1_not: String

  """All values that are contained in given list."""
  department1_in: [String!]

  """All values that are not contained in given list."""
  department1_not_in: [String!]

  """All values less than the given value."""
  department1_lt: String

  """All values less than or equal the given value."""
  department1_lte: String

  """All values greater than the given value."""
  department1_gt: String

  """All values greater than or equal the given value."""
  department1_gte: String

  """All values containing the given string."""
  department1_contains: String

  """All values not containing the given string."""
  department1_not_contains: String

  """All values starting with the given string."""
  department1_starts_with: String

  """All values not starting with the given string."""
  department1_not_starts_with: String

  """All values ending with the given string."""
  department1_ends_with: String

  """All values not ending with the given string."""
  department1_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  invitesSentDate: DateTime

  """All values that are not equal to given value."""
  invitesSentDate_not: DateTime

  """All values that are contained in given list."""
  invitesSentDate_in: [DateTime!]

  """All values that are not contained in given list."""
  invitesSentDate_not_in: [DateTime!]

  """All values less than the given value."""
  invitesSentDate_lt: DateTime

  """All values less than or equal the given value."""
  invitesSentDate_lte: DateTime

  """All values greater than the given value."""
  invitesSentDate_gt: DateTime

  """All values greater than or equal the given value."""
  invitesSentDate_gte: DateTime
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  invitesSentBy: UserWhereInput
  institution: InstitutionWhereInput
  teachers_every: UserWhereInput
  teachers_some: UserWhereInput
  teachers_none: UserWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  tests_every: TestWhereInput
  tests_some: TestWhereInput
  tests_none: TestWhereInput
  invitesSent_every: UserWhereInput
  invitesSent_some: UserWhereInput
  invitesSent_none: UserWhereInput
  inviteCourses_every: CourseInviteWhereInput
  inviteCourses_some: CourseInviteWhereInput
  inviteCourses_none: CourseInviteWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Institution implements Node {
  id: ID!
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  admins(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  teachers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  addedDate: DateTime
  addedBy: User!
  updateDate: DateTime
  updatedBy: User
  contacts(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

"""A connection to a list of items."""
type InstitutionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InstitutionEdge]!
  aggregate: AggregateInstitution!
}

input InstitutionCreateInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  admins: UserCreateManyWithoutAdminInstitutionsInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateManyWithoutAddedByInput {
  create: [InstitutionCreateWithoutAddedByInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutAdminsInput {
  create: [InstitutionCreateWithoutAdminsInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutContactsInput {
  create: [InstitutionCreateWithoutContactsInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutStudentsInput {
  create: [InstitutionCreateWithoutStudentsInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutTeachersInput {
  create: [InstitutionCreateWithoutTeachersInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateManyWithoutUpdatedByInput {
  create: [InstitutionCreateWithoutUpdatedByInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateOneInput {
  create: InstitutionCreateInput
  connect: InstitutionWhereUniqueInput
}

input InstitutionCreateOneWithoutCoursesInput {
  create: InstitutionCreateWithoutCoursesInput
  connect: InstitutionWhereUniqueInput
}

input InstitutionCreateOneWithoutUsersInput {
  create: InstitutionCreateWithoutUsersInput
  connect: InstitutionWhereUniqueInput
}

input InstitutionCreateWithoutAddedByInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  admins: UserCreateManyWithoutAdminInstitutionsInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutAdminsInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutContactsInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  admins: UserCreateManyWithoutAdminInstitutionsInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutCoursesInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  admins: UserCreateManyWithoutAdminInstitutionsInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
}

input InstitutionCreateWithoutStudentsInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  admins: UserCreateManyWithoutAdminInstitutionsInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutTeachersInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  admins: UserCreateManyWithoutAdminInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutUpdatedByInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserCreateManyWithoutInstitutionInput
  admins: UserCreateManyWithoutAdminInstitutionsInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  contacts: UserCreateManyWithoutInstitutionContactInput
  courses: CourseCreateManyWithoutInstitutionInput
}

input InstitutionCreateWithoutUsersInput {
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  admins: UserCreateManyWithoutAdminInstitutionsInput
  teachers: UserCreateManyWithoutTeacherInstitutionsInput
  students: UserCreateManyWithoutStudentInstitutionsInput
  addedBy: UserCreateOneWithoutInstitutionsAddedInput!
  updatedBy: UserCreateOneWithoutInstitutionUpdatesInput
  contacts: UserCreateManyWithoutInstitutionContactInput
  courses: CourseCreateManyWithoutInstitutionInput
}

"""An edge in a connection."""
type InstitutionEdge {
  """The item at the end of the edge."""
  node: Institution!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InstitutionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  type_ASC
  type_DESC
  deleted_ASC
  deleted_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InstitutionPreviousValues {
  id: ID!
  name: String!
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input InstitutionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InstitutionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstitutionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstitutionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
}

type InstitutionSubscriptionPayload {
  mutation: MutationType!
  node: Institution
  updatedFields: [String!]
  previousValues: InstitutionPreviousValues
}

input InstitutionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstitutionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstitutionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstitutionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstitutionWhereInput
}

input InstitutionUpdateDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateManyDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input InstitutionUpdateManyMutationInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input InstitutionUpdateManyWithoutAddedByInput {
  create: [InstitutionCreateWithoutAddedByInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [InstitutionUpdateManyWithWhereNestedInput!]
  deleteMany: [InstitutionScalarWhereInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutAddedByInput!]
}

input InstitutionUpdateManyWithoutAdminsInput {
  create: [InstitutionCreateWithoutAdminsInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutAdminsInput!]
  updateMany: [InstitutionUpdateManyWithWhereNestedInput!]
  deleteMany: [InstitutionScalarWhereInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutAdminsInput!]
}

input InstitutionUpdateManyWithoutContactsInput {
  create: [InstitutionCreateWithoutContactsInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutContactsInput!]
  updateMany: [InstitutionUpdateManyWithWhereNestedInput!]
  deleteMany: [InstitutionScalarWhereInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutContactsInput!]
}

input InstitutionUpdateManyWithoutStudentsInput {
  create: [InstitutionCreateWithoutStudentsInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutStudentsInput!]
  updateMany: [InstitutionUpdateManyWithWhereNestedInput!]
  deleteMany: [InstitutionScalarWhereInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutStudentsInput!]
}

input InstitutionUpdateManyWithoutTeachersInput {
  create: [InstitutionCreateWithoutTeachersInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutTeachersInput!]
  updateMany: [InstitutionUpdateManyWithWhereNestedInput!]
  deleteMany: [InstitutionScalarWhereInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutTeachersInput!]
}

input InstitutionUpdateManyWithoutUpdatedByInput {
  create: [InstitutionCreateWithoutUpdatedByInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [InstitutionUpdateManyWithWhereNestedInput!]
  deleteMany: [InstitutionScalarWhereInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input InstitutionUpdateManyWithWhereNestedInput {
  where: InstitutionScalarWhereInput!
  data: InstitutionUpdateManyDataInput!
}

input InstitutionUpdateOneInput {
  create: InstitutionCreateInput
  connect: InstitutionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InstitutionUpdateDataInput
  upsert: InstitutionUpsertNestedInput
}

input InstitutionUpdateOneRequiredWithoutCoursesInput {
  create: InstitutionCreateWithoutCoursesInput
  connect: InstitutionWhereUniqueInput
  update: InstitutionUpdateWithoutCoursesDataInput
  upsert: InstitutionUpsertWithoutCoursesInput
}

input InstitutionUpdateOneWithoutUsersInput {
  create: InstitutionCreateWithoutUsersInput
  connect: InstitutionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InstitutionUpdateWithoutUsersDataInput
  upsert: InstitutionUpsertWithoutUsersInput
}

input InstitutionUpdateWithoutAddedByDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutAdminsDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutContactsDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutCoursesDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
}

input InstitutionUpdateWithoutStudentsDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutTeachersDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutUpdatedByDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  users: UserUpdateManyWithoutInstitutionInput
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithoutUsersDataInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  type: String
  deleted: Boolean
  addedDate: DateTime
  updateDate: DateTime
  admins: UserUpdateManyWithoutAdminInstitutionsInput
  teachers: UserUpdateManyWithoutTeacherInstitutionsInput
  students: UserUpdateManyWithoutStudentInstitutionsInput
  addedBy: UserUpdateOneRequiredWithoutInstitutionsAddedInput
  updatedBy: UserUpdateOneWithoutInstitutionUpdatesInput
  contacts: UserUpdateManyWithoutInstitutionContactInput
  courses: CourseUpdateManyWithoutInstitutionInput
}

input InstitutionUpdateWithWhereUniqueWithoutAddedByInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutAddedByDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutAdminsInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutAdminsDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutContactsInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutContactsDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutStudentsInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutStudentsDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutTeachersInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutTeachersDataInput!
}

input InstitutionUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutUpdatedByDataInput!
}

input InstitutionUpsertNestedInput {
  update: InstitutionUpdateDataInput!
  create: InstitutionCreateInput!
}

input InstitutionUpsertWithoutCoursesInput {
  update: InstitutionUpdateWithoutCoursesDataInput!
  create: InstitutionCreateWithoutCoursesInput!
}

input InstitutionUpsertWithoutUsersInput {
  update: InstitutionUpdateWithoutUsersDataInput!
  create: InstitutionCreateWithoutUsersInput!
}

input InstitutionUpsertWithWhereUniqueWithoutAddedByInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutAddedByDataInput!
  create: InstitutionCreateWithoutAddedByInput!
}

input InstitutionUpsertWithWhereUniqueWithoutAdminsInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutAdminsDataInput!
  create: InstitutionCreateWithoutAdminsInput!
}

input InstitutionUpsertWithWhereUniqueWithoutContactsInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutContactsDataInput!
  create: InstitutionCreateWithoutContactsInput!
}

input InstitutionUpsertWithWhereUniqueWithoutStudentsInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutStudentsDataInput!
  create: InstitutionCreateWithoutStudentsInput!
}

input InstitutionUpsertWithWhereUniqueWithoutTeachersInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutTeachersDataInput!
  create: InstitutionCreateWithoutTeachersInput!
}

input InstitutionUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutUpdatedByDataInput!
  create: InstitutionCreateWithoutUpdatedByInput!
}

input InstitutionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstitutionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstitutionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstitutionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  admins_every: UserWhereInput
  admins_some: UserWhereInput
  admins_none: UserWhereInput
  teachers_every: UserWhereInput
  teachers_some: UserWhereInput
  teachers_none: UserWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  contacts_every: UserWhereInput
  contacts_some: UserWhereInput
  contacts_none: UserWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
}

input InstitutionWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createCourse(data: CourseCreateInput!): Course!
  createCourseInvite(data: CourseInviteCreateInput!): CourseInvite!
  createTest(data: TestCreateInput!): Test!
  createPanel(data: PanelCreateInput!): Panel!
  createResponseImage(data: ResponseImageCreateInput!): ResponseImage!
  createAnswer(data: AnswerCreateInput!): Answer!
  createQuestionChoice(data: QuestionChoiceCreateInput!): QuestionChoice!
  createAnswerChoice(data: AnswerChoiceCreateInput!): AnswerChoice!
  createChallenge(data: ChallengeCreateInput!): Challenge!
  createChallengeMessage(data: ChallengeMessageCreateInput!): ChallengeMessage!
  createSequence(data: SequenceCreateInput!): Sequence!
  createInstitution(data: InstitutionCreateInput!): Institution!
  createQuestion(data: QuestionCreateInput!): Question!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateCourseInvite(data: CourseInviteUpdateInput!, where: CourseInviteWhereUniqueInput!): CourseInvite
  updateTest(data: TestUpdateInput!, where: TestWhereUniqueInput!): Test
  updatePanel(data: PanelUpdateInput!, where: PanelWhereUniqueInput!): Panel
  updateResponseImage(data: ResponseImageUpdateInput!, where: ResponseImageWhereUniqueInput!): ResponseImage
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateQuestionChoice(data: QuestionChoiceUpdateInput!, where: QuestionChoiceWhereUniqueInput!): QuestionChoice
  updateAnswerChoice(data: AnswerChoiceUpdateInput!, where: AnswerChoiceWhereUniqueInput!): AnswerChoice
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  updateChallengeMessage(data: ChallengeMessageUpdateInput!, where: ChallengeMessageWhereUniqueInput!): ChallengeMessage
  updateSequence(data: SequenceUpdateInput!, where: SequenceWhereUniqueInput!): Sequence
  updateInstitution(data: InstitutionUpdateInput!, where: InstitutionWhereUniqueInput!): Institution
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourseInvite(where: CourseInviteWhereUniqueInput!): CourseInvite
  deleteTest(where: TestWhereUniqueInput!): Test
  deletePanel(where: PanelWhereUniqueInput!): Panel
  deleteResponseImage(where: ResponseImageWhereUniqueInput!): ResponseImage
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteQuestionChoice(where: QuestionChoiceWhereUniqueInput!): QuestionChoice
  deleteAnswerChoice(where: AnswerChoiceWhereUniqueInput!): AnswerChoice
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  deleteChallengeMessage(where: ChallengeMessageWhereUniqueInput!): ChallengeMessage
  deleteSequence(where: SequenceWhereUniqueInput!): Sequence
  deleteInstitution(where: InstitutionWhereUniqueInput!): Institution
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertCourseInvite(where: CourseInviteWhereUniqueInput!, create: CourseInviteCreateInput!, update: CourseInviteUpdateInput!): CourseInvite!
  upsertTest(where: TestWhereUniqueInput!, create: TestCreateInput!, update: TestUpdateInput!): Test!
  upsertPanel(where: PanelWhereUniqueInput!, create: PanelCreateInput!, update: PanelUpdateInput!): Panel!
  upsertResponseImage(where: ResponseImageWhereUniqueInput!, create: ResponseImageCreateInput!, update: ResponseImageUpdateInput!): ResponseImage!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  upsertQuestionChoice(where: QuestionChoiceWhereUniqueInput!, create: QuestionChoiceCreateInput!, update: QuestionChoiceUpdateInput!): QuestionChoice!
  upsertAnswerChoice(where: AnswerChoiceWhereUniqueInput!, create: AnswerChoiceCreateInput!, update: AnswerChoiceUpdateInput!): AnswerChoice!
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  upsertChallengeMessage(where: ChallengeMessageWhereUniqueInput!, create: ChallengeMessageCreateInput!, update: ChallengeMessageUpdateInput!): ChallengeMessage!
  upsertSequence(where: SequenceWhereUniqueInput!, create: SequenceCreateInput!, update: SequenceUpdateInput!): Sequence!
  upsertInstitution(where: InstitutionWhereUniqueInput!, create: InstitutionCreateInput!, update: InstitutionUpdateInput!): Institution!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  updateManyCourseInvites(data: CourseInviteUpdateManyMutationInput!, where: CourseInviteWhereInput): BatchPayload!
  updateManyTests(data: TestUpdateManyMutationInput!, where: TestWhereInput): BatchPayload!
  updateManyPanels(data: PanelUpdateManyMutationInput!, where: PanelWhereInput): BatchPayload!
  updateManyResponseImages(data: ResponseImageUpdateManyMutationInput!, where: ResponseImageWhereInput): BatchPayload!
  updateManyAnswers(data: AnswerUpdateManyMutationInput!, where: AnswerWhereInput): BatchPayload!
  updateManyQuestionChoices(data: QuestionChoiceUpdateManyMutationInput!, where: QuestionChoiceWhereInput): BatchPayload!
  updateManyAnswerChoices(data: AnswerChoiceUpdateManyMutationInput!, where: AnswerChoiceWhereInput): BatchPayload!
  updateManyChallenges(data: ChallengeUpdateManyMutationInput!, where: ChallengeWhereInput): BatchPayload!
  updateManyChallengeMessages(data: ChallengeMessageUpdateManyMutationInput!, where: ChallengeMessageWhereInput): BatchPayload!
  updateManySequences(data: SequenceUpdateManyMutationInput!, where: SequenceWhereInput): BatchPayload!
  updateManyInstitutions(data: InstitutionUpdateManyMutationInput!, where: InstitutionWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyCourseInvites(where: CourseInviteWhereInput): BatchPayload!
  deleteManyTests(where: TestWhereInput): BatchPayload!
  deleteManyPanels(where: PanelWhereInput): BatchPayload!
  deleteManyResponseImages(where: ResponseImageWhereInput): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  deleteManyQuestionChoices(where: QuestionChoiceWhereInput): BatchPayload!
  deleteManyAnswerChoices(where: AnswerChoiceWhereInput): BatchPayload!
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
  deleteManyChallengeMessages(where: ChallengeMessageWhereInput): BatchPayload!
  deleteManySequences(where: SequenceWhereInput): BatchPayload!
  deleteManyInstitutions(where: InstitutionWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Panel implements Node {
  id: ID!
  addedBy: User!
  addedDate: DateTime
  test: Test!
  link: String!
  label: String
  sequences(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  usedSequence(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  sentPanels(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  questionPanelsSent: Question
}

"""A connection to a list of items."""
type PanelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PanelEdge]!
  aggregate: AggregatePanel!
}

input PanelCreateInput {
  addedDate: DateTime
  link: String!
  label: String
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyWithoutPanelsInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
  sentPanels: SequenceCreateManyWithoutSentPanelInput
  questionPanelsSent: QuestionCreateOneWithoutSentPanelInput
}

input PanelCreateManyWithoutAddedByInput {
  create: [PanelCreateWithoutAddedByInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateManyWithoutSequencesInput {
  create: [PanelCreateWithoutSequencesInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateManyWithoutTestInput {
  create: [PanelCreateWithoutTestInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateManyWithoutUsedSequenceInput {
  create: [PanelCreateWithoutUsedSequenceInput!]
  connect: [PanelWhereUniqueInput!]
}

input PanelCreateOneWithoutQuestionPanelsSentInput {
  create: PanelCreateWithoutQuestionPanelsSentInput
  connect: PanelWhereUniqueInput
}

input PanelCreateOneWithoutQuestionsInput {
  create: PanelCreateWithoutQuestionsInput
  connect: PanelWhereUniqueInput
}

input PanelCreateOneWithoutSentPanelsInput {
  create: PanelCreateWithoutSentPanelsInput
  connect: PanelWhereUniqueInput
}

input PanelCreateWithoutAddedByInput {
  addedDate: DateTime
  link: String!
  label: String
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyWithoutPanelsInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
  sentPanels: SequenceCreateManyWithoutSentPanelInput
  questionPanelsSent: QuestionCreateOneWithoutSentPanelInput
}

input PanelCreateWithoutQuestionPanelsSentInput {
  addedDate: DateTime
  link: String!
  label: String
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyWithoutPanelsInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
  sentPanels: SequenceCreateManyWithoutSentPanelInput
}

input PanelCreateWithoutQuestionsInput {
  addedDate: DateTime
  link: String!
  label: String
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyWithoutPanelsInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  sentPanels: SequenceCreateManyWithoutSentPanelInput
  questionPanelsSent: QuestionCreateOneWithoutSentPanelInput
}

input PanelCreateWithoutSentPanelsInput {
  addedDate: DateTime
  link: String!
  label: String
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyWithoutPanelsInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
  questionPanelsSent: QuestionCreateOneWithoutSentPanelInput
}

input PanelCreateWithoutSequencesInput {
  addedDate: DateTime
  link: String!
  label: String
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
  sentPanels: SequenceCreateManyWithoutSentPanelInput
  questionPanelsSent: QuestionCreateOneWithoutSentPanelInput
}

input PanelCreateWithoutTestInput {
  addedDate: DateTime
  link: String!
  label: String
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  sequences: SequenceCreateManyWithoutPanelsInput
  usedSequence: SequenceCreateManyWithoutUsedPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
  sentPanels: SequenceCreateManyWithoutSentPanelInput
  questionPanelsSent: QuestionCreateOneWithoutSentPanelInput
}

input PanelCreateWithoutUsedSequenceInput {
  addedDate: DateTime
  link: String!
  label: String
  addedBy: UserCreateOneWithoutPanelsAddedInput!
  test: TestCreateOneWithoutPanelsInput!
  sequences: SequenceCreateManyWithoutPanelsInput
  questions: QuestionCreateManyWithoutPanelInput
  sentPanels: SequenceCreateManyWithoutSentPanelInput
  questionPanelsSent: QuestionCreateOneWithoutSentPanelInput
}

"""An edge in a connection."""
type PanelEdge {
  """The item at the end of the edge."""
  node: Panel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PanelOrderByInput {
  id_ASC
  id_DESC
  addedDate_ASC
  addedDate_DESC
  link_ASC
  link_DESC
  label_ASC
  label_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PanelPreviousValues {
  id: ID!
  addedDate: DateTime
  link: String!
  label: String
}

input PanelScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PanelScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PanelScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PanelScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
}

type PanelSubscriptionPayload {
  mutation: MutationType!
  node: Panel
  updatedFields: [String!]
  previousValues: PanelPreviousValues
}

input PanelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PanelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PanelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PanelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PanelWhereInput
}

input PanelUpdateInput {
  addedDate: DateTime
  link: String
  label: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyWithoutPanelsInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
  sentPanels: SequenceUpdateManyWithoutSentPanelInput
  questionPanelsSent: QuestionUpdateOneWithoutSentPanelInput
}

input PanelUpdateManyDataInput {
  addedDate: DateTime
  link: String
  label: String
}

input PanelUpdateManyMutationInput {
  addedDate: DateTime
  link: String
  label: String
}

input PanelUpdateManyWithoutAddedByInput {
  create: [PanelCreateWithoutAddedByInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [PanelUpdateManyWithWhereNestedInput!]
  deleteMany: [PanelScalarWhereInput!]
  upsert: [PanelUpsertWithWhereUniqueWithoutAddedByInput!]
}

input PanelUpdateManyWithoutSequencesInput {
  create: [PanelCreateWithoutSequencesInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueWithoutSequencesInput!]
  updateMany: [PanelUpdateManyWithWhereNestedInput!]
  deleteMany: [PanelScalarWhereInput!]
  upsert: [PanelUpsertWithWhereUniqueWithoutSequencesInput!]
}

input PanelUpdateManyWithoutTestInput {
  create: [PanelCreateWithoutTestInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueWithoutTestInput!]
  updateMany: [PanelUpdateManyWithWhereNestedInput!]
  deleteMany: [PanelScalarWhereInput!]
  upsert: [PanelUpsertWithWhereUniqueWithoutTestInput!]
}

input PanelUpdateManyWithoutUsedSequenceInput {
  create: [PanelCreateWithoutUsedSequenceInput!]
  connect: [PanelWhereUniqueInput!]
  disconnect: [PanelWhereUniqueInput!]
  delete: [PanelWhereUniqueInput!]
  update: [PanelUpdateWithWhereUniqueWithoutUsedSequenceInput!]
  updateMany: [PanelUpdateManyWithWhereNestedInput!]
  deleteMany: [PanelScalarWhereInput!]
  upsert: [PanelUpsertWithWhereUniqueWithoutUsedSequenceInput!]
}

input PanelUpdateManyWithWhereNestedInput {
  where: PanelScalarWhereInput!
  data: PanelUpdateManyDataInput!
}

input PanelUpdateOneWithoutQuestionPanelsSentInput {
  create: PanelCreateWithoutQuestionPanelsSentInput
  connect: PanelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PanelUpdateWithoutQuestionPanelsSentDataInput
  upsert: PanelUpsertWithoutQuestionPanelsSentInput
}

input PanelUpdateOneWithoutQuestionsInput {
  create: PanelCreateWithoutQuestionsInput
  connect: PanelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PanelUpdateWithoutQuestionsDataInput
  upsert: PanelUpsertWithoutQuestionsInput
}

input PanelUpdateOneWithoutSentPanelsInput {
  create: PanelCreateWithoutSentPanelsInput
  connect: PanelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PanelUpdateWithoutSentPanelsDataInput
  upsert: PanelUpsertWithoutSentPanelsInput
}

input PanelUpdateWithoutAddedByDataInput {
  addedDate: DateTime
  link: String
  label: String
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyWithoutPanelsInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
  sentPanels: SequenceUpdateManyWithoutSentPanelInput
  questionPanelsSent: QuestionUpdateOneWithoutSentPanelInput
}

input PanelUpdateWithoutQuestionPanelsSentDataInput {
  addedDate: DateTime
  link: String
  label: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyWithoutPanelsInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
  sentPanels: SequenceUpdateManyWithoutSentPanelInput
}

input PanelUpdateWithoutQuestionsDataInput {
  addedDate: DateTime
  link: String
  label: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyWithoutPanelsInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  sentPanels: SequenceUpdateManyWithoutSentPanelInput
  questionPanelsSent: QuestionUpdateOneWithoutSentPanelInput
}

input PanelUpdateWithoutSentPanelsDataInput {
  addedDate: DateTime
  link: String
  label: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyWithoutPanelsInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
  questionPanelsSent: QuestionUpdateOneWithoutSentPanelInput
}

input PanelUpdateWithoutSequencesDataInput {
  addedDate: DateTime
  link: String
  label: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
  sentPanels: SequenceUpdateManyWithoutSentPanelInput
  questionPanelsSent: QuestionUpdateOneWithoutSentPanelInput
}

input PanelUpdateWithoutTestDataInput {
  addedDate: DateTime
  link: String
  label: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  sequences: SequenceUpdateManyWithoutPanelsInput
  usedSequence: SequenceUpdateManyWithoutUsedPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
  sentPanels: SequenceUpdateManyWithoutSentPanelInput
  questionPanelsSent: QuestionUpdateOneWithoutSentPanelInput
}

input PanelUpdateWithoutUsedSequenceDataInput {
  addedDate: DateTime
  link: String
  label: String
  addedBy: UserUpdateOneRequiredWithoutPanelsAddedInput
  test: TestUpdateOneRequiredWithoutPanelsInput
  sequences: SequenceUpdateManyWithoutPanelsInput
  questions: QuestionUpdateManyWithoutPanelInput
  sentPanels: SequenceUpdateManyWithoutSentPanelInput
  questionPanelsSent: QuestionUpdateOneWithoutSentPanelInput
}

input PanelUpdateWithWhereUniqueWithoutAddedByInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateWithoutAddedByDataInput!
}

input PanelUpdateWithWhereUniqueWithoutSequencesInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateWithoutSequencesDataInput!
}

input PanelUpdateWithWhereUniqueWithoutTestInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateWithoutTestDataInput!
}

input PanelUpdateWithWhereUniqueWithoutUsedSequenceInput {
  where: PanelWhereUniqueInput!
  data: PanelUpdateWithoutUsedSequenceDataInput!
}

input PanelUpsertWithoutQuestionPanelsSentInput {
  update: PanelUpdateWithoutQuestionPanelsSentDataInput!
  create: PanelCreateWithoutQuestionPanelsSentInput!
}

input PanelUpsertWithoutQuestionsInput {
  update: PanelUpdateWithoutQuestionsDataInput!
  create: PanelCreateWithoutQuestionsInput!
}

input PanelUpsertWithoutSentPanelsInput {
  update: PanelUpdateWithoutSentPanelsDataInput!
  create: PanelCreateWithoutSentPanelsInput!
}

input PanelUpsertWithWhereUniqueWithoutAddedByInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateWithoutAddedByDataInput!
  create: PanelCreateWithoutAddedByInput!
}

input PanelUpsertWithWhereUniqueWithoutSequencesInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateWithoutSequencesDataInput!
  create: PanelCreateWithoutSequencesInput!
}

input PanelUpsertWithWhereUniqueWithoutTestInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateWithoutTestDataInput!
  create: PanelCreateWithoutTestInput!
}

input PanelUpsertWithWhereUniqueWithoutUsedSequenceInput {
  where: PanelWhereUniqueInput!
  update: PanelUpdateWithoutUsedSequenceDataInput!
  create: PanelCreateWithoutUsedSequenceInput!
}

input PanelWhereInput {
  """Logical AND on all given filters."""
  AND: [PanelWhereInput!]

  """Logical OR on all given filters."""
  OR: [PanelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PanelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  addedBy: UserWhereInput
  test: TestWhereInput
  sequences_every: SequenceWhereInput
  sequences_some: SequenceWhereInput
  sequences_none: SequenceWhereInput
  usedSequence_every: SequenceWhereInput
  usedSequence_some: SequenceWhereInput
  usedSequence_none: SequenceWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  sentPanels_every: SequenceWhereInput
  sentPanels_some: SequenceWhereInput
  sentPanels_none: SequenceWhereInput
  questionPanelsSent: QuestionWhereInput
}

input PanelWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  courseInvites(where: CourseInviteWhereInput, orderBy: CourseInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseInvite]!
  tests(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test]!
  panels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel]!
  responseImages(where: ResponseImageWhereInput, orderBy: ResponseImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResponseImage]!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  questionChoices(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionChoice]!
  answerChoices(where: AnswerChoiceWhereInput, orderBy: AnswerChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerChoice]!
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  challengeMessages(where: ChallengeMessageWhereInput, orderBy: ChallengeMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeMessage]!
  sequences(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence]!
  institutions(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  user(where: UserWhereUniqueInput!): User
  course(where: CourseWhereUniqueInput!): Course
  courseInvite(where: CourseInviteWhereUniqueInput!): CourseInvite
  test(where: TestWhereUniqueInput!): Test
  panel(where: PanelWhereUniqueInput!): Panel
  responseImage(where: ResponseImageWhereUniqueInput!): ResponseImage
  answer(where: AnswerWhereUniqueInput!): Answer
  questionChoice(where: QuestionChoiceWhereUniqueInput!): QuestionChoice
  answerChoice(where: AnswerChoiceWhereUniqueInput!): AnswerChoice
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  challengeMessage(where: ChallengeMessageWhereUniqueInput!): ChallengeMessage
  sequence(where: SequenceWhereUniqueInput!): Sequence
  institution(where: InstitutionWhereUniqueInput!): Institution
  question(where: QuestionWhereUniqueInput!): Question
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  courseInvitesConnection(where: CourseInviteWhereInput, orderBy: CourseInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseInviteConnection!
  testsConnection(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestConnection!
  panelsConnection(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PanelConnection!
  responseImagesConnection(where: ResponseImageWhereInput, orderBy: ResponseImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResponseImageConnection!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  questionChoicesConnection(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionChoiceConnection!
  answerChoicesConnection(where: AnswerChoiceWhereInput, orderBy: AnswerChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerChoiceConnection!
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!
  challengeMessagesConnection(where: ChallengeMessageWhereInput, orderBy: ChallengeMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeMessageConnection!
  sequencesConnection(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SequenceConnection!
  institutionsConnection(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstitutionConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  question: String!
  addedBy: User!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  updatedBy: User
  panel: Panel
  sentTo: User
  sentPanel: Panel
  sentDate: DateTime
  test: Test!
  choices(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionChoice!]
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  questionAnswers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  correctResponse: ResponseImage
  incorrectResponse: ResponseImage
}

type QuestionChoice implements Node {
  id: ID!
  choice: String!
  correct: Boolean
  addedBy: User!
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: User
  question: Question!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  answerChoices(where: AnswerChoiceWhereInput, orderBy: AnswerChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerChoice!]
}

"""A connection to a list of items."""
type QuestionChoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionChoiceEdge]!
  aggregate: AggregateQuestionChoice!
}

input QuestionChoiceCreateInput {
  choice: String!
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutQuestionChoiceAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutChoiceInput
}

input QuestionChoiceCreateManyWithoutAddedByInput {
  create: [QuestionChoiceCreateWithoutAddedByInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
}

input QuestionChoiceCreateManyWithoutQuestionInput {
  create: [QuestionChoiceCreateWithoutQuestionInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
}

input QuestionChoiceCreateManyWithoutUpdatedByInput {
  create: [QuestionChoiceCreateWithoutUpdatedByInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
}

input QuestionChoiceCreateOneWithoutAnswerChoicesInput {
  create: QuestionChoiceCreateWithoutAnswerChoicesInput
  connect: QuestionChoiceWhereUniqueInput
}

input QuestionChoiceCreateOneWithoutAnswersInput {
  create: QuestionChoiceCreateWithoutAnswersInput
  connect: QuestionChoiceWhereUniqueInput
}

input QuestionChoiceCreateWithoutAddedByInput {
  choice: String!
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutChoiceInput
}

input QuestionChoiceCreateWithoutAnswerChoicesInput {
  choice: String!
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutQuestionChoiceAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutAnswerInput
}

input QuestionChoiceCreateWithoutAnswersInput {
  choice: String!
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutQuestionChoiceAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionCreateOneWithoutChoicesInput!
  answerChoices: AnswerChoiceCreateManyWithoutChoiceInput
}

input QuestionChoiceCreateWithoutQuestionInput {
  choice: String!
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutQuestionChoiceAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionChoiceUpdatesInput
  answers: AnswerCreateManyWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutChoiceInput
}

input QuestionChoiceCreateWithoutUpdatedByInput {
  choice: String!
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserCreateOneWithoutQuestionChoiceAddedByInput!
  question: QuestionCreateOneWithoutChoicesInput!
  answers: AnswerCreateManyWithoutAnswerInput
  answerChoices: AnswerChoiceCreateManyWithoutChoiceInput
}

"""An edge in a connection."""
type QuestionChoiceEdge {
  """The item at the end of the edge."""
  node: QuestionChoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionChoiceOrderByInput {
  id_ASC
  id_DESC
  choice_ASC
  choice_DESC
  correct_ASC
  correct_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionChoicePreviousValues {
  id: ID!
  choice: String!
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input QuestionChoiceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionChoiceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionChoiceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionChoiceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  choice: String

  """All values that are not equal to given value."""
  choice_not: String

  """All values that are contained in given list."""
  choice_in: [String!]

  """All values that are not contained in given list."""
  choice_not_in: [String!]

  """All values less than the given value."""
  choice_lt: String

  """All values less than or equal the given value."""
  choice_lte: String

  """All values greater than the given value."""
  choice_gt: String

  """All values greater than or equal the given value."""
  choice_gte: String

  """All values containing the given string."""
  choice_contains: String

  """All values not containing the given string."""
  choice_not_contains: String

  """All values starting with the given string."""
  choice_starts_with: String

  """All values not starting with the given string."""
  choice_not_starts_with: String

  """All values ending with the given string."""
  choice_ends_with: String

  """All values not ending with the given string."""
  choice_not_ends_with: String
  correct: Boolean

  """All values that are not equal to given value."""
  correct_not: Boolean
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
}

type QuestionChoiceSubscriptionPayload {
  mutation: MutationType!
  node: QuestionChoice
  updatedFields: [String!]
  previousValues: QuestionChoicePreviousValues
}

input QuestionChoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionChoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionChoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionChoiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionChoiceWhereInput
}

input QuestionChoiceUpdateInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionChoiceAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutChoiceInput
}

input QuestionChoiceUpdateManyDataInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input QuestionChoiceUpdateManyMutationInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
}

input QuestionChoiceUpdateManyWithoutAddedByInput {
  create: [QuestionChoiceCreateWithoutAddedByInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
  disconnect: [QuestionChoiceWhereUniqueInput!]
  delete: [QuestionChoiceWhereUniqueInput!]
  update: [QuestionChoiceUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [QuestionChoiceUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionChoiceScalarWhereInput!]
  upsert: [QuestionChoiceUpsertWithWhereUniqueWithoutAddedByInput!]
}

input QuestionChoiceUpdateManyWithoutQuestionInput {
  create: [QuestionChoiceCreateWithoutQuestionInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
  disconnect: [QuestionChoiceWhereUniqueInput!]
  delete: [QuestionChoiceWhereUniqueInput!]
  update: [QuestionChoiceUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [QuestionChoiceUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionChoiceScalarWhereInput!]
  upsert: [QuestionChoiceUpsertWithWhereUniqueWithoutQuestionInput!]
}

input QuestionChoiceUpdateManyWithoutUpdatedByInput {
  create: [QuestionChoiceCreateWithoutUpdatedByInput!]
  connect: [QuestionChoiceWhereUniqueInput!]
  disconnect: [QuestionChoiceWhereUniqueInput!]
  delete: [QuestionChoiceWhereUniqueInput!]
  update: [QuestionChoiceUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [QuestionChoiceUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionChoiceScalarWhereInput!]
  upsert: [QuestionChoiceUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input QuestionChoiceUpdateManyWithWhereNestedInput {
  where: QuestionChoiceScalarWhereInput!
  data: QuestionChoiceUpdateManyDataInput!
}

input QuestionChoiceUpdateOneRequiredWithoutAnswerChoicesInput {
  create: QuestionChoiceCreateWithoutAnswerChoicesInput
  connect: QuestionChoiceWhereUniqueInput
  update: QuestionChoiceUpdateWithoutAnswerChoicesDataInput
  upsert: QuestionChoiceUpsertWithoutAnswerChoicesInput
}

input QuestionChoiceUpdateOneRequiredWithoutAnswersInput {
  create: QuestionChoiceCreateWithoutAnswersInput
  connect: QuestionChoiceWhereUniqueInput
  update: QuestionChoiceUpdateWithoutAnswersDataInput
  upsert: QuestionChoiceUpsertWithoutAnswersInput
}

input QuestionChoiceUpdateWithoutAddedByDataInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutChoiceInput
}

input QuestionChoiceUpdateWithoutAnswerChoicesDataInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionChoiceAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutAnswerInput
}

input QuestionChoiceUpdateWithoutAnswersDataInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionChoiceAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answerChoices: AnswerChoiceUpdateManyWithoutChoiceInput
}

input QuestionChoiceUpdateWithoutQuestionDataInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionChoiceAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionChoiceUpdatesInput
  answers: AnswerUpdateManyWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutChoiceInput
}

input QuestionChoiceUpdateWithoutUpdatedByDataInput {
  choice: String
  correct: Boolean
  addedDate: DateTime
  updateDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionChoiceAddedByInput
  question: QuestionUpdateOneRequiredWithoutChoicesInput
  answers: AnswerUpdateManyWithoutAnswerInput
  answerChoices: AnswerChoiceUpdateManyWithoutChoiceInput
}

input QuestionChoiceUpdateWithWhereUniqueWithoutAddedByInput {
  where: QuestionChoiceWhereUniqueInput!
  data: QuestionChoiceUpdateWithoutAddedByDataInput!
}

input QuestionChoiceUpdateWithWhereUniqueWithoutQuestionInput {
  where: QuestionChoiceWhereUniqueInput!
  data: QuestionChoiceUpdateWithoutQuestionDataInput!
}

input QuestionChoiceUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionChoiceWhereUniqueInput!
  data: QuestionChoiceUpdateWithoutUpdatedByDataInput!
}

input QuestionChoiceUpsertWithoutAnswerChoicesInput {
  update: QuestionChoiceUpdateWithoutAnswerChoicesDataInput!
  create: QuestionChoiceCreateWithoutAnswerChoicesInput!
}

input QuestionChoiceUpsertWithoutAnswersInput {
  update: QuestionChoiceUpdateWithoutAnswersDataInput!
  create: QuestionChoiceCreateWithoutAnswersInput!
}

input QuestionChoiceUpsertWithWhereUniqueWithoutAddedByInput {
  where: QuestionChoiceWhereUniqueInput!
  update: QuestionChoiceUpdateWithoutAddedByDataInput!
  create: QuestionChoiceCreateWithoutAddedByInput!
}

input QuestionChoiceUpsertWithWhereUniqueWithoutQuestionInput {
  where: QuestionChoiceWhereUniqueInput!
  update: QuestionChoiceUpdateWithoutQuestionDataInput!
  create: QuestionChoiceCreateWithoutQuestionInput!
}

input QuestionChoiceUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionChoiceWhereUniqueInput!
  update: QuestionChoiceUpdateWithoutUpdatedByDataInput!
  create: QuestionChoiceCreateWithoutUpdatedByInput!
}

input QuestionChoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionChoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionChoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionChoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  choice: String

  """All values that are not equal to given value."""
  choice_not: String

  """All values that are contained in given list."""
  choice_in: [String!]

  """All values that are not contained in given list."""
  choice_not_in: [String!]

  """All values less than the given value."""
  choice_lt: String

  """All values less than or equal the given value."""
  choice_lte: String

  """All values greater than the given value."""
  choice_gt: String

  """All values greater than or equal the given value."""
  choice_gte: String

  """All values containing the given string."""
  choice_contains: String

  """All values not containing the given string."""
  choice_not_contains: String

  """All values starting with the given string."""
  choice_starts_with: String

  """All values not starting with the given string."""
  choice_not_starts_with: String

  """All values ending with the given string."""
  choice_ends_with: String

  """All values not ending with the given string."""
  choice_not_ends_with: String
  correct: Boolean

  """All values that are not equal to given value."""
  correct_not: Boolean
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  question: QuestionWhereInput
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  answerChoices_every: AnswerChoiceWhereInput
  answerChoices_some: AnswerChoiceWhereInput
  answerChoices_none: AnswerChoiceWhereInput
}

input QuestionChoiceWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutAddedByInput {
  create: [QuestionCreateWithoutAddedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutCorrectResponseInput {
  create: [QuestionCreateWithoutCorrectResponseInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutIncorrectResponseInput {
  create: [QuestionCreateWithoutIncorrectResponseInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutPanelInput {
  create: [QuestionCreateWithoutPanelInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutSentToInput {
  create: [QuestionCreateWithoutSentToInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutTestInput {
  create: [QuestionCreateWithoutTestInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneWithoutChallengesInput {
  create: QuestionCreateWithoutChallengesInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutChoicesInput {
  create: QuestionCreateWithoutChoicesInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutQuestionAnswersInput {
  create: QuestionCreateWithoutQuestionAnswersInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateOneWithoutSentPanelInput {
  create: QuestionCreateWithoutSentPanelInput
  connect: QuestionWhereUniqueInput
}

input QuestionCreateWithoutAddedByInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutChallengesInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutChoicesInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutCorrectResponseInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutIncorrectResponseInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
}

input QuestionCreateWithoutPanelInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutQuestionAnswersInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutSentPanelInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutSentToInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutTestInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  updatedBy: UserCreateOneWithoutQuestionUpdatesInput
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionCreateWithoutUpdatedByInput {
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserCreateOneWithoutQuestionsAddedByInput!
  panel: PanelCreateOneWithoutQuestionsInput
  sentTo: UserCreateOneWithoutQuestionsSentToInput
  sentPanel: PanelCreateOneWithoutQuestionPanelsSentInput
  test: TestCreateOneWithoutQuestionsInput!
  choices: QuestionChoiceCreateManyWithoutQuestionInput
  challenges: ChallengeCreateManyWithoutQuestionInput
  questionAnswers: AnswerCreateManyWithoutQuestionInput
  correctResponse: ResponseImageCreateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  addedDate_ASC
  addedDate_DESC
  questionTime_ASC
  questionTime_DESC
  expirationTime_ASC
  expirationTime_DESC
  updateDate_ASC
  updateDate_DESC
  sentDate_ASC
  sentDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  question: String!
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
}

input QuestionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  questionTime: DateTime

  """All values that are not equal to given value."""
  questionTime_not: DateTime

  """All values that are contained in given list."""
  questionTime_in: [DateTime!]

  """All values that are not contained in given list."""
  questionTime_not_in: [DateTime!]

  """All values less than the given value."""
  questionTime_lt: DateTime

  """All values less than or equal the given value."""
  questionTime_lte: DateTime

  """All values greater than the given value."""
  questionTime_gt: DateTime

  """All values greater than or equal the given value."""
  questionTime_gte: DateTime
  expirationTime: DateTime

  """All values that are not equal to given value."""
  expirationTime_not: DateTime

  """All values that are contained in given list."""
  expirationTime_in: [DateTime!]

  """All values that are not contained in given list."""
  expirationTime_not_in: [DateTime!]

  """All values less than the given value."""
  expirationTime_lt: DateTime

  """All values less than or equal the given value."""
  expirationTime_lte: DateTime

  """All values greater than the given value."""
  expirationTime_gt: DateTime

  """All values greater than or equal the given value."""
  expirationTime_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  sentDate: DateTime

  """All values that are not equal to given value."""
  sentDate_not: DateTime

  """All values that are contained in given list."""
  sentDate_in: [DateTime!]

  """All values that are not contained in given list."""
  sentDate_not_in: [DateTime!]

  """All values less than the given value."""
  sentDate_lt: DateTime

  """All values less than or equal the given value."""
  sentDate_lte: DateTime

  """All values greater than the given value."""
  sentDate_gt: DateTime

  """All values greater than or equal the given value."""
  sentDate_gte: DateTime
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateManyDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
}

input QuestionUpdateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueNestedInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueNestedInput!]
}

input QuestionUpdateManyMutationInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
}

input QuestionUpdateManyWithoutAddedByInput {
  create: [QuestionCreateWithoutAddedByInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAddedByInput!]
}

input QuestionUpdateManyWithoutCorrectResponseInput {
  create: [QuestionCreateWithoutCorrectResponseInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutCorrectResponseInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutCorrectResponseInput!]
}

input QuestionUpdateManyWithoutIncorrectResponseInput {
  create: [QuestionCreateWithoutIncorrectResponseInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutIncorrectResponseInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutIncorrectResponseInput!]
}

input QuestionUpdateManyWithoutPanelInput {
  create: [QuestionCreateWithoutPanelInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutPanelInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutPanelInput!]
}

input QuestionUpdateManyWithoutSentToInput {
  create: [QuestionCreateWithoutSentToInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutSentToInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutSentToInput!]
}

input QuestionUpdateManyWithoutTestInput {
  create: [QuestionCreateWithoutTestInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutTestInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutTestInput!]
}

input QuestionUpdateManyWithoutUpdatedByInput {
  create: [QuestionCreateWithoutUpdatedByInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [QuestionUpdateManyWithWhereNestedInput!]
  deleteMany: [QuestionScalarWhereInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input QuestionUpdateManyWithWhereNestedInput {
  where: QuestionScalarWhereInput!
  data: QuestionUpdateManyDataInput!
}

input QuestionUpdateOneRequiredWithoutChoicesInput {
  create: QuestionCreateWithoutChoicesInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutChoicesDataInput
  upsert: QuestionUpsertWithoutChoicesInput
}

input QuestionUpdateOneRequiredWithoutQuestionAnswersInput {
  create: QuestionCreateWithoutQuestionAnswersInput
  connect: QuestionWhereUniqueInput
  update: QuestionUpdateWithoutQuestionAnswersDataInput
  upsert: QuestionUpsertWithoutQuestionAnswersInput
}

input QuestionUpdateOneWithoutChallengesInput {
  create: QuestionCreateWithoutChallengesInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QuestionUpdateWithoutChallengesDataInput
  upsert: QuestionUpsertWithoutChallengesInput
}

input QuestionUpdateOneWithoutSentPanelInput {
  create: QuestionCreateWithoutSentPanelInput
  connect: QuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: QuestionUpdateWithoutSentPanelDataInput
  upsert: QuestionUpsertWithoutSentPanelInput
}

input QuestionUpdateWithoutAddedByDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutChallengesDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutChoicesDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutCorrectResponseDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutIncorrectResponseDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
}

input QuestionUpdateWithoutPanelDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutQuestionAnswersDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutSentPanelDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutSentToDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutTestDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  updatedBy: UserUpdateOneWithoutQuestionUpdatesInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithoutUpdatedByDataInput {
  question: String
  addedDate: DateTime
  questionTime: DateTime
  expirationTime: DateTime
  updateDate: DateTime
  sentDate: DateTime
  addedBy: UserUpdateOneRequiredWithoutQuestionsAddedByInput
  panel: PanelUpdateOneWithoutQuestionsInput
  sentTo: UserUpdateOneWithoutQuestionsSentToInput
  sentPanel: PanelUpdateOneWithoutQuestionPanelsSentInput
  test: TestUpdateOneRequiredWithoutQuestionsInput
  choices: QuestionChoiceUpdateManyWithoutQuestionInput
  challenges: ChallengeUpdateManyWithoutQuestionInput
  questionAnswers: AnswerUpdateManyWithoutQuestionInput
  correctResponse: ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput
  incorrectResponse: ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput
}

input QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutAddedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutAddedByDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutCorrectResponseInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutCorrectResponseDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutIncorrectResponseInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutIncorrectResponseDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutPanelInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutPanelDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutSentToInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutSentToDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutTestInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutTestDataInput!
}

input QuestionUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateWithoutUpdatedByDataInput!
}

input QuestionUpsertWithoutChallengesInput {
  update: QuestionUpdateWithoutChallengesDataInput!
  create: QuestionCreateWithoutChallengesInput!
}

input QuestionUpsertWithoutChoicesInput {
  update: QuestionUpdateWithoutChoicesDataInput!
  create: QuestionCreateWithoutChoicesInput!
}

input QuestionUpsertWithoutQuestionAnswersInput {
  update: QuestionUpdateWithoutQuestionAnswersDataInput!
  create: QuestionCreateWithoutQuestionAnswersInput!
}

input QuestionUpsertWithoutSentPanelInput {
  update: QuestionUpdateWithoutSentPanelDataInput!
  create: QuestionCreateWithoutSentPanelInput!
}

input QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithWhereUniqueWithoutAddedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutAddedByDataInput!
  create: QuestionCreateWithoutAddedByInput!
}

input QuestionUpsertWithWhereUniqueWithoutCorrectResponseInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutCorrectResponseDataInput!
  create: QuestionCreateWithoutCorrectResponseInput!
}

input QuestionUpsertWithWhereUniqueWithoutIncorrectResponseInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutIncorrectResponseDataInput!
  create: QuestionCreateWithoutIncorrectResponseInput!
}

input QuestionUpsertWithWhereUniqueWithoutPanelInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutPanelDataInput!
  create: QuestionCreateWithoutPanelInput!
}

input QuestionUpsertWithWhereUniqueWithoutSentToInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutSentToDataInput!
  create: QuestionCreateWithoutSentToInput!
}

input QuestionUpsertWithWhereUniqueWithoutTestInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutTestDataInput!
  create: QuestionCreateWithoutTestInput!
}

input QuestionUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateWithoutUpdatedByDataInput!
  create: QuestionCreateWithoutUpdatedByInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  question: String

  """All values that are not equal to given value."""
  question_not: String

  """All values that are contained in given list."""
  question_in: [String!]

  """All values that are not contained in given list."""
  question_not_in: [String!]

  """All values less than the given value."""
  question_lt: String

  """All values less than or equal the given value."""
  question_lte: String

  """All values greater than the given value."""
  question_gt: String

  """All values greater than or equal the given value."""
  question_gte: String

  """All values containing the given string."""
  question_contains: String

  """All values not containing the given string."""
  question_not_contains: String

  """All values starting with the given string."""
  question_starts_with: String

  """All values not starting with the given string."""
  question_not_starts_with: String

  """All values ending with the given string."""
  question_ends_with: String

  """All values not ending with the given string."""
  question_not_ends_with: String
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  questionTime: DateTime

  """All values that are not equal to given value."""
  questionTime_not: DateTime

  """All values that are contained in given list."""
  questionTime_in: [DateTime!]

  """All values that are not contained in given list."""
  questionTime_not_in: [DateTime!]

  """All values less than the given value."""
  questionTime_lt: DateTime

  """All values less than or equal the given value."""
  questionTime_lte: DateTime

  """All values greater than the given value."""
  questionTime_gt: DateTime

  """All values greater than or equal the given value."""
  questionTime_gte: DateTime
  expirationTime: DateTime

  """All values that are not equal to given value."""
  expirationTime_not: DateTime

  """All values that are contained in given list."""
  expirationTime_in: [DateTime!]

  """All values that are not contained in given list."""
  expirationTime_not_in: [DateTime!]

  """All values less than the given value."""
  expirationTime_lt: DateTime

  """All values less than or equal the given value."""
  expirationTime_lte: DateTime

  """All values greater than the given value."""
  expirationTime_gt: DateTime

  """All values greater than or equal the given value."""
  expirationTime_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  sentDate: DateTime

  """All values that are not equal to given value."""
  sentDate_not: DateTime

  """All values that are contained in given list."""
  sentDate_in: [DateTime!]

  """All values that are not contained in given list."""
  sentDate_not_in: [DateTime!]

  """All values less than the given value."""
  sentDate_lt: DateTime

  """All values less than or equal the given value."""
  sentDate_lte: DateTime

  """All values greater than the given value."""
  sentDate_gt: DateTime

  """All values greater than or equal the given value."""
  sentDate_gte: DateTime
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  panel: PanelWhereInput
  sentTo: UserWhereInput
  sentPanel: PanelWhereInput
  test: TestWhereInput
  choices_every: QuestionChoiceWhereInput
  choices_some: QuestionChoiceWhereInput
  choices_none: QuestionChoiceWhereInput
  challenges_every: ChallengeWhereInput
  challenges_some: ChallengeWhereInput
  challenges_none: ChallengeWhereInput
  questionAnswers_every: AnswerWhereInput
  questionAnswers_some: AnswerWhereInput
  questionAnswers_none: AnswerWhereInput
  correctResponse: ResponseImageWhereInput
  incorrectResponse: ResponseImageWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type ResponseImage implements Node {
  id: ID!
  link: String!
  type: ResponseImageType!
  correctQuestionResponses(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  incorrectQuestionResponses(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
}

"""A connection to a list of items."""
type ResponseImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResponseImageEdge]!
  aggregate: AggregateResponseImage!
}

input ResponseImageCreateInput {
  link: String!
  type: ResponseImageType!
  correctQuestionResponses: QuestionCreateManyWithoutCorrectResponseInput
  incorrectQuestionResponses: QuestionCreateManyWithoutIncorrectResponseInput
}

input ResponseImageCreateOneWithoutCorrectQuestionResponsesInput {
  create: ResponseImageCreateWithoutCorrectQuestionResponsesInput
  connect: ResponseImageWhereUniqueInput
}

input ResponseImageCreateOneWithoutIncorrectQuestionResponsesInput {
  create: ResponseImageCreateWithoutIncorrectQuestionResponsesInput
  connect: ResponseImageWhereUniqueInput
}

input ResponseImageCreateWithoutCorrectQuestionResponsesInput {
  link: String!
  type: ResponseImageType!
  incorrectQuestionResponses: QuestionCreateManyWithoutIncorrectResponseInput
}

input ResponseImageCreateWithoutIncorrectQuestionResponsesInput {
  link: String!
  type: ResponseImageType!
  correctQuestionResponses: QuestionCreateManyWithoutCorrectResponseInput
}

"""An edge in a connection."""
type ResponseImageEdge {
  """The item at the end of the edge."""
  node: ResponseImage!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResponseImageOrderByInput {
  id_ASC
  id_DESC
  link_ASC
  link_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ResponseImagePreviousValues {
  id: ID!
  link: String!
  type: ResponseImageType!
}

type ResponseImageSubscriptionPayload {
  mutation: MutationType!
  node: ResponseImage
  updatedFields: [String!]
  previousValues: ResponseImagePreviousValues
}

input ResponseImageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResponseImageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResponseImageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResponseImageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResponseImageWhereInput
}

enum ResponseImageType {
  CORRECT
  INCORRECT
}

input ResponseImageUpdateInput {
  link: String
  type: ResponseImageType
  correctQuestionResponses: QuestionUpdateManyWithoutCorrectResponseInput
  incorrectQuestionResponses: QuestionUpdateManyWithoutIncorrectResponseInput
}

input ResponseImageUpdateManyMutationInput {
  link: String
  type: ResponseImageType
}

input ResponseImageUpdateOneWithoutCorrectQuestionResponsesInput {
  create: ResponseImageCreateWithoutCorrectQuestionResponsesInput
  connect: ResponseImageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ResponseImageUpdateWithoutCorrectQuestionResponsesDataInput
  upsert: ResponseImageUpsertWithoutCorrectQuestionResponsesInput
}

input ResponseImageUpdateOneWithoutIncorrectQuestionResponsesInput {
  create: ResponseImageCreateWithoutIncorrectQuestionResponsesInput
  connect: ResponseImageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ResponseImageUpdateWithoutIncorrectQuestionResponsesDataInput
  upsert: ResponseImageUpsertWithoutIncorrectQuestionResponsesInput
}

input ResponseImageUpdateWithoutCorrectQuestionResponsesDataInput {
  link: String
  type: ResponseImageType
  incorrectQuestionResponses: QuestionUpdateManyWithoutIncorrectResponseInput
}

input ResponseImageUpdateWithoutIncorrectQuestionResponsesDataInput {
  link: String
  type: ResponseImageType
  correctQuestionResponses: QuestionUpdateManyWithoutCorrectResponseInput
}

input ResponseImageUpsertWithoutCorrectQuestionResponsesInput {
  update: ResponseImageUpdateWithoutCorrectQuestionResponsesDataInput!
  create: ResponseImageCreateWithoutCorrectQuestionResponsesInput!
}

input ResponseImageUpsertWithoutIncorrectQuestionResponsesInput {
  update: ResponseImageUpdateWithoutIncorrectQuestionResponsesDataInput!
  create: ResponseImageCreateWithoutIncorrectQuestionResponsesInput!
}

input ResponseImageWhereInput {
  """Logical AND on all given filters."""
  AND: [ResponseImageWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResponseImageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResponseImageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  link: String

  """All values that are not equal to given value."""
  link_not: String

  """All values that are contained in given list."""
  link_in: [String!]

  """All values that are not contained in given list."""
  link_not_in: [String!]

  """All values less than the given value."""
  link_lt: String

  """All values less than or equal the given value."""
  link_lte: String

  """All values greater than the given value."""
  link_gt: String

  """All values greater than or equal the given value."""
  link_gte: String

  """All values containing the given string."""
  link_contains: String

  """All values not containing the given string."""
  link_not_contains: String

  """All values starting with the given string."""
  link_starts_with: String

  """All values not starting with the given string."""
  link_not_starts_with: String

  """All values ending with the given string."""
  link_ends_with: String

  """All values not ending with the given string."""
  link_not_ends_with: String
  type: ResponseImageType

  """All values that are not equal to given value."""
  type_not: ResponseImageType

  """All values that are contained in given list."""
  type_in: [ResponseImageType!]

  """All values that are not contained in given list."""
  type_not_in: [ResponseImageType!]
  correctQuestionResponses_every: QuestionWhereInput
  correctQuestionResponses_some: QuestionWhereInput
  correctQuestionResponses_none: QuestionWhereInput
  incorrectQuestionResponses_every: QuestionWhereInput
  incorrectQuestionResponses_some: QuestionWhereInput
  incorrectQuestionResponses_none: QuestionWhereInput
}

input ResponseImageWhereUniqueInput {
  id: ID
}

type Sequence implements Node {
  id: ID!
  sequenceAddedDate: DateTime
  addedBy: User!
  startHour: String
  endHour: String
  testEndDate: DateTime
  test: Test!
  sentTo: User
  sentPanel: Panel
  usedStudents(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  usedPanels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  panels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
  studs: [String!]!
  pans: [String!]!
  usedstuds: [String!]!
  usedpans: [String!]!
  testCycles: Test
}

"""A connection to a list of items."""
type SequenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SequenceEdge]!
  aggregate: AggregateSequence!
}

input SequenceCreateInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateManyWithoutAddedByInput {
  create: [SequenceCreateWithoutAddedByInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutPanelsInput {
  create: [SequenceCreateWithoutPanelsInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutSentPanelInput {
  create: [SequenceCreateWithoutSentPanelInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutSentToInput {
  create: [SequenceCreateWithoutSentToInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutStudentsInput {
  create: [SequenceCreateWithoutStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutTestCyclesInput {
  create: [SequenceCreateWithoutTestCyclesInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutUsedPanelsInput {
  create: [SequenceCreateWithoutUsedPanelsInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateManyWithoutUsedStudentsInput {
  create: [SequenceCreateWithoutUsedStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
}

input SequenceCreateOneWithoutTestInput {
  create: SequenceCreateWithoutTestInput
  connect: SequenceWhereUniqueInput
}

input SequenceCreatepansInput {
  set: [String!]
}

input SequenceCreatestudsInput {
  set: [String!]
}

input SequenceCreateusedpansInput {
  set: [String!]
}

input SequenceCreateusedstudsInput {
  set: [String!]
}

input SequenceCreateWithoutAddedByInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateWithoutPanelsInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateWithoutSentPanelInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateWithoutSentToInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateWithoutStudentsInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateWithoutTestCyclesInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
}

input SequenceCreateWithoutTestInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateWithoutUsedPanelsInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedStudents: UserCreateManyWithoutUsedTestSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

input SequenceCreateWithoutUsedStudentsInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceCreatestudsInput
  pans: SequenceCreatepansInput
  usedstuds: SequenceCreateusedstudsInput
  usedpans: SequenceCreateusedpansInput
  addedBy: UserCreateOneWithoutSequencesAddedInput!
  test: TestCreateOneWithoutSequencesInput!
  sentTo: UserCreateOneWithoutSentToSequencesInput
  sentPanel: PanelCreateOneWithoutSentPanelsInput
  usedPanels: PanelCreateManyWithoutUsedSequenceInput
  students: UserCreateManyWithoutTestSequenceInput
  panels: PanelCreateManyWithoutSequencesInput
  testCycles: TestCreateOneWithoutSequenceCyclesInput
}

"""An edge in a connection."""
type SequenceEdge {
  """The item at the end of the edge."""
  node: Sequence!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SequenceOrderByInput {
  id_ASC
  id_DESC
  sequenceAddedDate_ASC
  sequenceAddedDate_DESC
  startHour_ASC
  startHour_DESC
  endHour_ASC
  endHour_DESC
  testEndDate_ASC
  testEndDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SequencePreviousValues {
  id: ID!
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: [String!]!
  pans: [String!]!
  usedstuds: [String!]!
  usedpans: [String!]!
}

input SequenceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SequenceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SequenceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SequenceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sequenceAddedDate: DateTime

  """All values that are not equal to given value."""
  sequenceAddedDate_not: DateTime

  """All values that are contained in given list."""
  sequenceAddedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  sequenceAddedDate_not_in: [DateTime!]

  """All values less than the given value."""
  sequenceAddedDate_lt: DateTime

  """All values less than or equal the given value."""
  sequenceAddedDate_lte: DateTime

  """All values greater than the given value."""
  sequenceAddedDate_gt: DateTime

  """All values greater than or equal the given value."""
  sequenceAddedDate_gte: DateTime
  startHour: String

  """All values that are not equal to given value."""
  startHour_not: String

  """All values that are contained in given list."""
  startHour_in: [String!]

  """All values that are not contained in given list."""
  startHour_not_in: [String!]

  """All values less than the given value."""
  startHour_lt: String

  """All values less than or equal the given value."""
  startHour_lte: String

  """All values greater than the given value."""
  startHour_gt: String

  """All values greater than or equal the given value."""
  startHour_gte: String

  """All values containing the given string."""
  startHour_contains: String

  """All values not containing the given string."""
  startHour_not_contains: String

  """All values starting with the given string."""
  startHour_starts_with: String

  """All values not starting with the given string."""
  startHour_not_starts_with: String

  """All values ending with the given string."""
  startHour_ends_with: String

  """All values not ending with the given string."""
  startHour_not_ends_with: String
  endHour: String

  """All values that are not equal to given value."""
  endHour_not: String

  """All values that are contained in given list."""
  endHour_in: [String!]

  """All values that are not contained in given list."""
  endHour_not_in: [String!]

  """All values less than the given value."""
  endHour_lt: String

  """All values less than or equal the given value."""
  endHour_lte: String

  """All values greater than the given value."""
  endHour_gt: String

  """All values greater than or equal the given value."""
  endHour_gte: String

  """All values containing the given string."""
  endHour_contains: String

  """All values not containing the given string."""
  endHour_not_contains: String

  """All values starting with the given string."""
  endHour_starts_with: String

  """All values not starting with the given string."""
  endHour_not_starts_with: String

  """All values ending with the given string."""
  endHour_ends_with: String

  """All values not ending with the given string."""
  endHour_not_ends_with: String
  testEndDate: DateTime

  """All values that are not equal to given value."""
  testEndDate_not: DateTime

  """All values that are contained in given list."""
  testEndDate_in: [DateTime!]

  """All values that are not contained in given list."""
  testEndDate_not_in: [DateTime!]

  """All values less than the given value."""
  testEndDate_lt: DateTime

  """All values less than or equal the given value."""
  testEndDate_lte: DateTime

  """All values greater than the given value."""
  testEndDate_gt: DateTime

  """All values greater than or equal the given value."""
  testEndDate_gte: DateTime
}

type SequenceSubscriptionPayload {
  mutation: MutationType!
  node: Sequence
  updatedFields: [String!]
  previousValues: SequencePreviousValues
}

input SequenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SequenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SequenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SequenceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SequenceWhereInput
}

input SequenceUpdateInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateManyDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
}

input SequenceUpdateManyMutationInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
}

input SequenceUpdateManyWithoutAddedByInput {
  create: [SequenceCreateWithoutAddedByInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutAddedByInput!]
}

input SequenceUpdateManyWithoutPanelsInput {
  create: [SequenceCreateWithoutPanelsInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutPanelsInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutPanelsInput!]
}

input SequenceUpdateManyWithoutSentPanelInput {
  create: [SequenceCreateWithoutSentPanelInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutSentPanelInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutSentPanelInput!]
}

input SequenceUpdateManyWithoutSentToInput {
  create: [SequenceCreateWithoutSentToInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutSentToInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutSentToInput!]
}

input SequenceUpdateManyWithoutStudentsInput {
  create: [SequenceCreateWithoutStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutStudentsInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutStudentsInput!]
}

input SequenceUpdateManyWithoutTestCyclesInput {
  create: [SequenceCreateWithoutTestCyclesInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutTestCyclesInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutTestCyclesInput!]
}

input SequenceUpdateManyWithoutUsedPanelsInput {
  create: [SequenceCreateWithoutUsedPanelsInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutUsedPanelsInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutUsedPanelsInput!]
}

input SequenceUpdateManyWithoutUsedStudentsInput {
  create: [SequenceCreateWithoutUsedStudentsInput!]
  connect: [SequenceWhereUniqueInput!]
  disconnect: [SequenceWhereUniqueInput!]
  delete: [SequenceWhereUniqueInput!]
  update: [SequenceUpdateWithWhereUniqueWithoutUsedStudentsInput!]
  updateMany: [SequenceUpdateManyWithWhereNestedInput!]
  deleteMany: [SequenceScalarWhereInput!]
  upsert: [SequenceUpsertWithWhereUniqueWithoutUsedStudentsInput!]
}

input SequenceUpdateManyWithWhereNestedInput {
  where: SequenceScalarWhereInput!
  data: SequenceUpdateManyDataInput!
}

input SequenceUpdateOneWithoutTestInput {
  create: SequenceCreateWithoutTestInput
  connect: SequenceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SequenceUpdateWithoutTestDataInput
  upsert: SequenceUpsertWithoutTestInput
}

input SequenceUpdatepansInput {
  set: [String!]
}

input SequenceUpdatestudsInput {
  set: [String!]
}

input SequenceUpdateusedpansInput {
  set: [String!]
}

input SequenceUpdateusedstudsInput {
  set: [String!]
}

input SequenceUpdateWithoutAddedByDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithoutPanelsDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithoutSentPanelDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithoutSentToDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithoutStudentsDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithoutTestCyclesDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
}

input SequenceUpdateWithoutTestDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithoutUsedPanelsDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedStudents: UserUpdateManyWithoutUsedTestSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithoutUsedStudentsDataInput {
  sequenceAddedDate: DateTime
  startHour: String
  endHour: String
  testEndDate: DateTime
  studs: SequenceUpdatestudsInput
  pans: SequenceUpdatepansInput
  usedstuds: SequenceUpdateusedstudsInput
  usedpans: SequenceUpdateusedpansInput
  addedBy: UserUpdateOneRequiredWithoutSequencesAddedInput
  test: TestUpdateOneRequiredWithoutSequencesInput
  sentTo: UserUpdateOneWithoutSentToSequencesInput
  sentPanel: PanelUpdateOneWithoutSentPanelsInput
  usedPanels: PanelUpdateManyWithoutUsedSequenceInput
  students: UserUpdateManyWithoutTestSequenceInput
  panels: PanelUpdateManyWithoutSequencesInput
  testCycles: TestUpdateOneWithoutSequenceCyclesInput
}

input SequenceUpdateWithWhereUniqueWithoutAddedByInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutAddedByDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutPanelsInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutPanelsDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutSentPanelInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutSentPanelDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutSentToInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutSentToDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutStudentsInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutStudentsDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutTestCyclesInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutTestCyclesDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutUsedPanelsInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutUsedPanelsDataInput!
}

input SequenceUpdateWithWhereUniqueWithoutUsedStudentsInput {
  where: SequenceWhereUniqueInput!
  data: SequenceUpdateWithoutUsedStudentsDataInput!
}

input SequenceUpsertWithoutTestInput {
  update: SequenceUpdateWithoutTestDataInput!
  create: SequenceCreateWithoutTestInput!
}

input SequenceUpsertWithWhereUniqueWithoutAddedByInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutAddedByDataInput!
  create: SequenceCreateWithoutAddedByInput!
}

input SequenceUpsertWithWhereUniqueWithoutPanelsInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutPanelsDataInput!
  create: SequenceCreateWithoutPanelsInput!
}

input SequenceUpsertWithWhereUniqueWithoutSentPanelInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutSentPanelDataInput!
  create: SequenceCreateWithoutSentPanelInput!
}

input SequenceUpsertWithWhereUniqueWithoutSentToInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutSentToDataInput!
  create: SequenceCreateWithoutSentToInput!
}

input SequenceUpsertWithWhereUniqueWithoutStudentsInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutStudentsDataInput!
  create: SequenceCreateWithoutStudentsInput!
}

input SequenceUpsertWithWhereUniqueWithoutTestCyclesInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutTestCyclesDataInput!
  create: SequenceCreateWithoutTestCyclesInput!
}

input SequenceUpsertWithWhereUniqueWithoutUsedPanelsInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutUsedPanelsDataInput!
  create: SequenceCreateWithoutUsedPanelsInput!
}

input SequenceUpsertWithWhereUniqueWithoutUsedStudentsInput {
  where: SequenceWhereUniqueInput!
  update: SequenceUpdateWithoutUsedStudentsDataInput!
  create: SequenceCreateWithoutUsedStudentsInput!
}

input SequenceWhereInput {
  """Logical AND on all given filters."""
  AND: [SequenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [SequenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SequenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sequenceAddedDate: DateTime

  """All values that are not equal to given value."""
  sequenceAddedDate_not: DateTime

  """All values that are contained in given list."""
  sequenceAddedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  sequenceAddedDate_not_in: [DateTime!]

  """All values less than the given value."""
  sequenceAddedDate_lt: DateTime

  """All values less than or equal the given value."""
  sequenceAddedDate_lte: DateTime

  """All values greater than the given value."""
  sequenceAddedDate_gt: DateTime

  """All values greater than or equal the given value."""
  sequenceAddedDate_gte: DateTime
  startHour: String

  """All values that are not equal to given value."""
  startHour_not: String

  """All values that are contained in given list."""
  startHour_in: [String!]

  """All values that are not contained in given list."""
  startHour_not_in: [String!]

  """All values less than the given value."""
  startHour_lt: String

  """All values less than or equal the given value."""
  startHour_lte: String

  """All values greater than the given value."""
  startHour_gt: String

  """All values greater than or equal the given value."""
  startHour_gte: String

  """All values containing the given string."""
  startHour_contains: String

  """All values not containing the given string."""
  startHour_not_contains: String

  """All values starting with the given string."""
  startHour_starts_with: String

  """All values not starting with the given string."""
  startHour_not_starts_with: String

  """All values ending with the given string."""
  startHour_ends_with: String

  """All values not ending with the given string."""
  startHour_not_ends_with: String
  endHour: String

  """All values that are not equal to given value."""
  endHour_not: String

  """All values that are contained in given list."""
  endHour_in: [String!]

  """All values that are not contained in given list."""
  endHour_not_in: [String!]

  """All values less than the given value."""
  endHour_lt: String

  """All values less than or equal the given value."""
  endHour_lte: String

  """All values greater than the given value."""
  endHour_gt: String

  """All values greater than or equal the given value."""
  endHour_gte: String

  """All values containing the given string."""
  endHour_contains: String

  """All values not containing the given string."""
  endHour_not_contains: String

  """All values starting with the given string."""
  endHour_starts_with: String

  """All values not starting with the given string."""
  endHour_not_starts_with: String

  """All values ending with the given string."""
  endHour_ends_with: String

  """All values not ending with the given string."""
  endHour_not_ends_with: String
  testEndDate: DateTime

  """All values that are not equal to given value."""
  testEndDate_not: DateTime

  """All values that are contained in given list."""
  testEndDate_in: [DateTime!]

  """All values that are not contained in given list."""
  testEndDate_not_in: [DateTime!]

  """All values less than the given value."""
  testEndDate_lt: DateTime

  """All values less than or equal the given value."""
  testEndDate_lte: DateTime

  """All values greater than the given value."""
  testEndDate_gt: DateTime

  """All values greater than or equal the given value."""
  testEndDate_gte: DateTime
  addedBy: UserWhereInput
  test: TestWhereInput
  sentTo: UserWhereInput
  sentPanel: PanelWhereInput
  usedStudents_every: UserWhereInput
  usedStudents_some: UserWhereInput
  usedStudents_none: UserWhereInput
  usedPanels_every: PanelWhereInput
  usedPanels_some: PanelWhereInput
  usedPanels_none: PanelWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  panels_every: PanelWhereInput
  panels_some: PanelWhereInput
  panels_none: PanelWhereInput
  testCycles: TestWhereInput
}

input SequenceWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  courseInvite(where: CourseInviteSubscriptionWhereInput): CourseInviteSubscriptionPayload
  test(where: TestSubscriptionWhereInput): TestSubscriptionPayload
  panel(where: PanelSubscriptionWhereInput): PanelSubscriptionPayload
  responseImage(where: ResponseImageSubscriptionWhereInput): ResponseImageSubscriptionPayload
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  questionChoice(where: QuestionChoiceSubscriptionWhereInput): QuestionChoiceSubscriptionPayload
  answerChoice(where: AnswerChoiceSubscriptionWhereInput): AnswerChoiceSubscriptionPayload
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
  challengeMessage(where: ChallengeMessageSubscriptionWhereInput): ChallengeMessageSubscriptionPayload
  sequence(where: SequenceSubscriptionWhereInput): SequenceSubscriptionPayload
  institution(where: InstitutionSubscriptionWhereInput): InstitutionSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
}

type Test implements Node {
  id: ID!
  addedBy: User!
  addedDate: DateTime
  updateDate: DateTime
  updatedBy: User
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  course: Course!
  panels(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  sequences: Sequence
  sequenceCycles(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
}

"""A connection to a list of items."""
type TestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestEdge]!
  aggregate: AggregateTest!
}

input TestCreateInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
  sequenceCycles: SequenceCreateManyWithoutTestCyclesInput
}

input TestCreateManyWithoutAddedByInput {
  create: [TestCreateWithoutAddedByInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateManyWithoutCourseInput {
  create: [TestCreateWithoutCourseInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateManyWithoutUpdatedByInput {
  create: [TestCreateWithoutUpdatedByInput!]
  connect: [TestWhereUniqueInput!]
}

input TestCreateOneWithoutPanelsInput {
  create: TestCreateWithoutPanelsInput
  connect: TestWhereUniqueInput
}

input TestCreateOneWithoutQuestionsInput {
  create: TestCreateWithoutQuestionsInput
  connect: TestWhereUniqueInput
}

input TestCreateOneWithoutSequenceCyclesInput {
  create: TestCreateWithoutSequenceCyclesInput
  connect: TestWhereUniqueInput
}

input TestCreateOneWithoutSequencesInput {
  create: TestCreateWithoutSequencesInput
  connect: TestWhereUniqueInput
}

input TestCreateWithoutAddedByInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
  sequenceCycles: SequenceCreateManyWithoutTestCyclesInput
}

input TestCreateWithoutCourseInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
  sequenceCycles: SequenceCreateManyWithoutTestCyclesInput
}

input TestCreateWithoutPanelsInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
  sequenceCycles: SequenceCreateManyWithoutTestCyclesInput
}

input TestCreateWithoutQuestionsInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
  sequenceCycles: SequenceCreateManyWithoutTestCyclesInput
}

input TestCreateWithoutSequenceCyclesInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
}

input TestCreateWithoutSequencesInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserCreateOneWithoutTestsAddedInput!
  updatedBy: UserCreateOneWithoutTestUpdatesInput
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequenceCycles: SequenceCreateManyWithoutTestCyclesInput
}

input TestCreateWithoutUpdatedByInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserCreateOneWithoutTestsAddedInput!
  course: CourseCreateOneWithoutTestsInput!
  panels: PanelCreateManyWithoutTestInput
  questions: QuestionCreateManyWithoutTestInput
  sequences: SequenceCreateOneWithoutTestInput
  sequenceCycles: SequenceCreateManyWithoutTestCyclesInput
}

"""An edge in a connection."""
type TestEdge {
  """The item at the end of the edge."""
  node: Test!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestOrderByInput {
  id_ASC
  id_DESC
  addedDate_ASC
  addedDate_DESC
  updateDate_ASC
  updateDate_DESC
  subject_ASC
  subject_DESC
  testNumber_ASC
  testNumber_DESC
  testDate_ASC
  testDate_DESC
  testType_ASC
  testType_DESC
  published_ASC
  published_DESC
  publishDate_ASC
  publishDate_DESC
  release_ASC
  release_DESC
  releaseDate_ASC
  releaseDate_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  endDate_ASC
  endDate_DESC
  deleted_ASC
  deleted_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TestPreviousValues {
  id: ID!
  addedDate: DateTime
  updateDate: DateTime
  subject: String!
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
}

input TestScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  testNumber: String

  """All values that are not equal to given value."""
  testNumber_not: String

  """All values that are contained in given list."""
  testNumber_in: [String!]

  """All values that are not contained in given list."""
  testNumber_not_in: [String!]

  """All values less than the given value."""
  testNumber_lt: String

  """All values less than or equal the given value."""
  testNumber_lte: String

  """All values greater than the given value."""
  testNumber_gt: String

  """All values greater than or equal the given value."""
  testNumber_gte: String

  """All values containing the given string."""
  testNumber_contains: String

  """All values not containing the given string."""
  testNumber_not_contains: String

  """All values starting with the given string."""
  testNumber_starts_with: String

  """All values not starting with the given string."""
  testNumber_not_starts_with: String

  """All values ending with the given string."""
  testNumber_ends_with: String

  """All values not ending with the given string."""
  testNumber_not_ends_with: String
  testDate: DateTime

  """All values that are not equal to given value."""
  testDate_not: DateTime

  """All values that are contained in given list."""
  testDate_in: [DateTime!]

  """All values that are not contained in given list."""
  testDate_not_in: [DateTime!]

  """All values less than the given value."""
  testDate_lt: DateTime

  """All values less than or equal the given value."""
  testDate_lte: DateTime

  """All values greater than the given value."""
  testDate_gt: DateTime

  """All values greater than or equal the given value."""
  testDate_gte: DateTime
  testType: TestType

  """All values that are not equal to given value."""
  testType_not: TestType

  """All values that are contained in given list."""
  testType_in: [TestType!]

  """All values that are not contained in given list."""
  testType_not_in: [TestType!]
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  publishDate: DateTime

  """All values that are not equal to given value."""
  publishDate_not: DateTime

  """All values that are contained in given list."""
  publishDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishDate_lt: DateTime

  """All values less than or equal the given value."""
  publishDate_lte: DateTime

  """All values greater than the given value."""
  publishDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishDate_gte: DateTime
  release: Boolean

  """All values that are not equal to given value."""
  release_not: Boolean
  releaseDate: DateTime

  """All values that are not equal to given value."""
  releaseDate_not: DateTime

  """All values that are contained in given list."""
  releaseDate_in: [DateTime!]

  """All values that are not contained in given list."""
  releaseDate_not_in: [DateTime!]

  """All values less than the given value."""
  releaseDate_lt: DateTime

  """All values less than or equal the given value."""
  releaseDate_lte: DateTime

  """All values greater than the given value."""
  releaseDate_gt: DateTime

  """All values greater than or equal the given value."""
  releaseDate_gte: DateTime
  startTime: String

  """All values that are not equal to given value."""
  startTime_not: String

  """All values that are contained in given list."""
  startTime_in: [String!]

  """All values that are not contained in given list."""
  startTime_not_in: [String!]

  """All values less than the given value."""
  startTime_lt: String

  """All values less than or equal the given value."""
  startTime_lte: String

  """All values greater than the given value."""
  startTime_gt: String

  """All values greater than or equal the given value."""
  startTime_gte: String

  """All values containing the given string."""
  startTime_contains: String

  """All values not containing the given string."""
  startTime_not_contains: String

  """All values starting with the given string."""
  startTime_starts_with: String

  """All values not starting with the given string."""
  startTime_not_starts_with: String

  """All values ending with the given string."""
  startTime_ends_with: String

  """All values not ending with the given string."""
  startTime_not_ends_with: String
  endTime: String

  """All values that are not equal to given value."""
  endTime_not: String

  """All values that are contained in given list."""
  endTime_in: [String!]

  """All values that are not contained in given list."""
  endTime_not_in: [String!]

  """All values less than the given value."""
  endTime_lt: String

  """All values less than or equal the given value."""
  endTime_lte: String

  """All values greater than the given value."""
  endTime_gt: String

  """All values greater than or equal the given value."""
  endTime_gte: String

  """All values containing the given string."""
  endTime_contains: String

  """All values not containing the given string."""
  endTime_not_contains: String

  """All values starting with the given string."""
  endTime_starts_with: String

  """All values not starting with the given string."""
  endTime_not_starts_with: String

  """All values ending with the given string."""
  endTime_ends_with: String

  """All values not ending with the given string."""
  endTime_not_ends_with: String
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
}

type TestSubscriptionPayload {
  mutation: MutationType!
  node: Test
  updatedFields: [String!]
  previousValues: TestPreviousValues
}

input TestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestWhereInput
}

enum TestType {
  LAB
  CLASS
}

input TestUpdateInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
  sequenceCycles: SequenceUpdateManyWithoutTestCyclesInput
}

input TestUpdateManyDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
}

input TestUpdateManyMutationInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
}

input TestUpdateManyWithoutAddedByInput {
  create: [TestCreateWithoutAddedByInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  delete: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutAddedByInput!]
  updateMany: [TestUpdateManyWithWhereNestedInput!]
  deleteMany: [TestScalarWhereInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutAddedByInput!]
}

input TestUpdateManyWithoutCourseInput {
  create: [TestCreateWithoutCourseInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  delete: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [TestUpdateManyWithWhereNestedInput!]
  deleteMany: [TestScalarWhereInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutCourseInput!]
}

input TestUpdateManyWithoutUpdatedByInput {
  create: [TestCreateWithoutUpdatedByInput!]
  connect: [TestWhereUniqueInput!]
  disconnect: [TestWhereUniqueInput!]
  delete: [TestWhereUniqueInput!]
  update: [TestUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [TestUpdateManyWithWhereNestedInput!]
  deleteMany: [TestScalarWhereInput!]
  upsert: [TestUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input TestUpdateManyWithWhereNestedInput {
  where: TestScalarWhereInput!
  data: TestUpdateManyDataInput!
}

input TestUpdateOneRequiredWithoutPanelsInput {
  create: TestCreateWithoutPanelsInput
  connect: TestWhereUniqueInput
  update: TestUpdateWithoutPanelsDataInput
  upsert: TestUpsertWithoutPanelsInput
}

input TestUpdateOneRequiredWithoutQuestionsInput {
  create: TestCreateWithoutQuestionsInput
  connect: TestWhereUniqueInput
  update: TestUpdateWithoutQuestionsDataInput
  upsert: TestUpsertWithoutQuestionsInput
}

input TestUpdateOneRequiredWithoutSequencesInput {
  create: TestCreateWithoutSequencesInput
  connect: TestWhereUniqueInput
  update: TestUpdateWithoutSequencesDataInput
  upsert: TestUpsertWithoutSequencesInput
}

input TestUpdateOneWithoutSequenceCyclesInput {
  create: TestCreateWithoutSequenceCyclesInput
  connect: TestWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TestUpdateWithoutSequenceCyclesDataInput
  upsert: TestUpsertWithoutSequenceCyclesInput
}

input TestUpdateWithoutAddedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
  sequenceCycles: SequenceUpdateManyWithoutTestCyclesInput
}

input TestUpdateWithoutCourseDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
  sequenceCycles: SequenceUpdateManyWithoutTestCyclesInput
}

input TestUpdateWithoutPanelsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
  sequenceCycles: SequenceUpdateManyWithoutTestCyclesInput
}

input TestUpdateWithoutQuestionsDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
  sequenceCycles: SequenceUpdateManyWithoutTestCyclesInput
}

input TestUpdateWithoutSequenceCyclesDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
}

input TestUpdateWithoutSequencesDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  updatedBy: UserUpdateOneWithoutTestUpdatesInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequenceCycles: SequenceUpdateManyWithoutTestCyclesInput
}

input TestUpdateWithoutUpdatedByDataInput {
  addedDate: DateTime
  updateDate: DateTime
  subject: String
  testNumber: String
  testDate: DateTime
  testType: TestType
  published: Boolean
  publishDate: DateTime
  release: Boolean
  releaseDate: DateTime
  startTime: String
  endTime: String
  endDate: DateTime
  deleted: Boolean
  addedBy: UserUpdateOneRequiredWithoutTestsAddedInput
  course: CourseUpdateOneRequiredWithoutTestsInput
  panels: PanelUpdateManyWithoutTestInput
  questions: QuestionUpdateManyWithoutTestInput
  sequences: SequenceUpdateOneWithoutTestInput
  sequenceCycles: SequenceUpdateManyWithoutTestCyclesInput
}

input TestUpdateWithWhereUniqueWithoutAddedByInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutAddedByDataInput!
}

input TestUpdateWithWhereUniqueWithoutCourseInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutCourseDataInput!
}

input TestUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: TestWhereUniqueInput!
  data: TestUpdateWithoutUpdatedByDataInput!
}

input TestUpsertWithoutPanelsInput {
  update: TestUpdateWithoutPanelsDataInput!
  create: TestCreateWithoutPanelsInput!
}

input TestUpsertWithoutQuestionsInput {
  update: TestUpdateWithoutQuestionsDataInput!
  create: TestCreateWithoutQuestionsInput!
}

input TestUpsertWithoutSequenceCyclesInput {
  update: TestUpdateWithoutSequenceCyclesDataInput!
  create: TestCreateWithoutSequenceCyclesInput!
}

input TestUpsertWithoutSequencesInput {
  update: TestUpdateWithoutSequencesDataInput!
  create: TestCreateWithoutSequencesInput!
}

input TestUpsertWithWhereUniqueWithoutAddedByInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutAddedByDataInput!
  create: TestCreateWithoutAddedByInput!
}

input TestUpsertWithWhereUniqueWithoutCourseInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutCourseDataInput!
  create: TestCreateWithoutCourseInput!
}

input TestUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: TestWhereUniqueInput!
  update: TestUpdateWithoutUpdatedByDataInput!
  create: TestCreateWithoutUpdatedByInput!
}

input TestWhereInput {
  """Logical AND on all given filters."""
  AND: [TestWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  addedDate: DateTime

  """All values that are not equal to given value."""
  addedDate_not: DateTime

  """All values that are contained in given list."""
  addedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  addedDate_not_in: [DateTime!]

  """All values less than the given value."""
  addedDate_lt: DateTime

  """All values less than or equal the given value."""
  addedDate_lte: DateTime

  """All values greater than the given value."""
  addedDate_gt: DateTime

  """All values greater than or equal the given value."""
  addedDate_gte: DateTime
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  subject: String

  """All values that are not equal to given value."""
  subject_not: String

  """All values that are contained in given list."""
  subject_in: [String!]

  """All values that are not contained in given list."""
  subject_not_in: [String!]

  """All values less than the given value."""
  subject_lt: String

  """All values less than or equal the given value."""
  subject_lte: String

  """All values greater than the given value."""
  subject_gt: String

  """All values greater than or equal the given value."""
  subject_gte: String

  """All values containing the given string."""
  subject_contains: String

  """All values not containing the given string."""
  subject_not_contains: String

  """All values starting with the given string."""
  subject_starts_with: String

  """All values not starting with the given string."""
  subject_not_starts_with: String

  """All values ending with the given string."""
  subject_ends_with: String

  """All values not ending with the given string."""
  subject_not_ends_with: String
  testNumber: String

  """All values that are not equal to given value."""
  testNumber_not: String

  """All values that are contained in given list."""
  testNumber_in: [String!]

  """All values that are not contained in given list."""
  testNumber_not_in: [String!]

  """All values less than the given value."""
  testNumber_lt: String

  """All values less than or equal the given value."""
  testNumber_lte: String

  """All values greater than the given value."""
  testNumber_gt: String

  """All values greater than or equal the given value."""
  testNumber_gte: String

  """All values containing the given string."""
  testNumber_contains: String

  """All values not containing the given string."""
  testNumber_not_contains: String

  """All values starting with the given string."""
  testNumber_starts_with: String

  """All values not starting with the given string."""
  testNumber_not_starts_with: String

  """All values ending with the given string."""
  testNumber_ends_with: String

  """All values not ending with the given string."""
  testNumber_not_ends_with: String
  testDate: DateTime

  """All values that are not equal to given value."""
  testDate_not: DateTime

  """All values that are contained in given list."""
  testDate_in: [DateTime!]

  """All values that are not contained in given list."""
  testDate_not_in: [DateTime!]

  """All values less than the given value."""
  testDate_lt: DateTime

  """All values less than or equal the given value."""
  testDate_lte: DateTime

  """All values greater than the given value."""
  testDate_gt: DateTime

  """All values greater than or equal the given value."""
  testDate_gte: DateTime
  testType: TestType

  """All values that are not equal to given value."""
  testType_not: TestType

  """All values that are contained in given list."""
  testType_in: [TestType!]

  """All values that are not contained in given list."""
  testType_not_in: [TestType!]
  published: Boolean

  """All values that are not equal to given value."""
  published_not: Boolean
  publishDate: DateTime

  """All values that are not equal to given value."""
  publishDate_not: DateTime

  """All values that are contained in given list."""
  publishDate_in: [DateTime!]

  """All values that are not contained in given list."""
  publishDate_not_in: [DateTime!]

  """All values less than the given value."""
  publishDate_lt: DateTime

  """All values less than or equal the given value."""
  publishDate_lte: DateTime

  """All values greater than the given value."""
  publishDate_gt: DateTime

  """All values greater than or equal the given value."""
  publishDate_gte: DateTime
  release: Boolean

  """All values that are not equal to given value."""
  release_not: Boolean
  releaseDate: DateTime

  """All values that are not equal to given value."""
  releaseDate_not: DateTime

  """All values that are contained in given list."""
  releaseDate_in: [DateTime!]

  """All values that are not contained in given list."""
  releaseDate_not_in: [DateTime!]

  """All values less than the given value."""
  releaseDate_lt: DateTime

  """All values less than or equal the given value."""
  releaseDate_lte: DateTime

  """All values greater than the given value."""
  releaseDate_gt: DateTime

  """All values greater than or equal the given value."""
  releaseDate_gte: DateTime
  startTime: String

  """All values that are not equal to given value."""
  startTime_not: String

  """All values that are contained in given list."""
  startTime_in: [String!]

  """All values that are not contained in given list."""
  startTime_not_in: [String!]

  """All values less than the given value."""
  startTime_lt: String

  """All values less than or equal the given value."""
  startTime_lte: String

  """All values greater than the given value."""
  startTime_gt: String

  """All values greater than or equal the given value."""
  startTime_gte: String

  """All values containing the given string."""
  startTime_contains: String

  """All values not containing the given string."""
  startTime_not_contains: String

  """All values starting with the given string."""
  startTime_starts_with: String

  """All values not starting with the given string."""
  startTime_not_starts_with: String

  """All values ending with the given string."""
  startTime_ends_with: String

  """All values not ending with the given string."""
  startTime_not_ends_with: String
  endTime: String

  """All values that are not equal to given value."""
  endTime_not: String

  """All values that are contained in given list."""
  endTime_in: [String!]

  """All values that are not contained in given list."""
  endTime_not_in: [String!]

  """All values less than the given value."""
  endTime_lt: String

  """All values less than or equal the given value."""
  endTime_lte: String

  """All values greater than the given value."""
  endTime_gt: String

  """All values greater than or equal the given value."""
  endTime_gte: String

  """All values containing the given string."""
  endTime_contains: String

  """All values not containing the given string."""
  endTime_not_contains: String

  """All values starting with the given string."""
  endTime_starts_with: String

  """All values not starting with the given string."""
  endTime_not_starts_with: String

  """All values ending with the given string."""
  endTime_ends_with: String

  """All values not ending with the given string."""
  endTime_not_ends_with: String
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  deleted: Boolean

  """All values that are not equal to given value."""
  deleted_not: Boolean
  addedBy: UserWhereInput
  updatedBy: UserWhereInput
  course: CourseWhereInput
  panels_every: PanelWhereInput
  panels_some: PanelWhereInput
  panels_none: PanelWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  sequences: SequenceWhereInput
  sequenceCycles_every: SequenceWhereInput
  sequenceCycles_some: SequenceWhereInput
  sequenceCycles_none: SequenceWhereInput
}

input TestWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  studentIds: [String!]!
  teacherIds: [String!]!
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  invites(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  adminInstitutions(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  teacherInstitutions(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  studentInstitutions(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  institution: Institution
  updatedBy: User
  role: UserType
  institutionContact(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  teacherCourses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  studentCourses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  testSequence(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  usedTestSequence(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  coursesAdded(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  testsAdded(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  panelsAdded(where: PanelWhereInput, orderBy: PanelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Panel!]
  institutionsAdded(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  institutionUpdates(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
  courseUpdates(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  testUpdates(where: TestWhereInput, orderBy: TestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Test!]
  questionsAddedBy(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  questionUpdates(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  answerUpdates(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer!]
  questionChoiceAddedBy(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionChoice!]
  questionChoiceUpdates(where: QuestionChoiceWhereInput, orderBy: QuestionChoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionChoice!]
  challengeUpdates(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  userUpdates(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  questionsSentTo(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  sequencesAdded(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  sentToSequences(where: SequenceWhereInput, orderBy: SequenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sequence!]
  invitesSent(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  adminInstitution: Institution
  invitesSentTo(where: CourseInviteWhereInput, orderBy: CourseInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseInvite!]
  addedInvitesBy(where: CourseInviteWhereInput, orderBy: CourseInviteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseInvite!]
  challengeMessagesAdded(where: ChallengeMessageWhereInput, orderBy: ChallengeMessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ChallengeMessage!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateManyWithoutAdminInstitutionsInput {
  create: [UserCreateWithoutAdminInstitutionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInstitutionContactInput {
  create: [UserCreateWithoutInstitutionContactInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInstitutionInput {
  create: [UserCreateWithoutInstitutionInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInvitesInput {
  create: [UserCreateWithoutInvitesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutStudentCoursesInput {
  create: [UserCreateWithoutStudentCoursesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutStudentInstitutionsInput {
  create: [UserCreateWithoutStudentInstitutionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeacherCoursesInput {
  create: [UserCreateWithoutTeacherCoursesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTeacherInstitutionsInput {
  create: [UserCreateWithoutTeacherInstitutionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTestSequenceInput {
  create: [UserCreateWithoutTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUpdatedByInput {
  create: [UserCreateWithoutUpdatedByInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUsedTestSequenceInput {
  create: [UserCreateWithoutUsedTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutAddedInvitesByInput {
  create: UserCreateWithoutAddedInvitesByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAnswersInput {
  create: UserCreateWithoutAnswersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAnswerUpdatesInput {
  create: UserCreateWithoutAnswerUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengeMessagesAddedInput {
  create: UserCreateWithoutChallengeMessagesAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengesInput {
  create: UserCreateWithoutChallengesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengeUpdatesInput {
  create: UserCreateWithoutChallengeUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCoursesAddedInput {
  create: UserCreateWithoutCoursesAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCourseUpdatesInput {
  create: UserCreateWithoutCourseUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInstitutionsAddedInput {
  create: UserCreateWithoutInstitutionsAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInstitutionUpdatesInput {
  create: UserCreateWithoutInstitutionUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInvitesSentInput {
  create: UserCreateWithoutInvitesSentInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInvitesSentToInput {
  create: UserCreateWithoutInvitesSentToInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPanelsAddedInput {
  create: UserCreateWithoutPanelsAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionChoiceAddedByInput {
  create: UserCreateWithoutQuestionChoiceAddedByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionChoiceUpdatesInput {
  create: UserCreateWithoutQuestionChoiceUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionsAddedByInput {
  create: UserCreateWithoutQuestionsAddedByInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionsSentToInput {
  create: UserCreateWithoutQuestionsSentToInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQuestionUpdatesInput {
  create: UserCreateWithoutQuestionUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentToSequencesInput {
  create: UserCreateWithoutSentToSequencesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSequencesAddedInput {
  create: UserCreateWithoutSequencesAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestsAddedInput {
  create: UserCreateWithoutTestsAddedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTestUpdatesInput {
  create: UserCreateWithoutTestUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserUpdatesInput {
  create: UserCreateWithoutUserUpdatesInput
  connect: UserWhereUniqueInput
}

input UserCreatestudentIdsInput {
  set: [String!]
}

input UserCreateteacherIdsInput {
  set: [String!]
}

input UserCreateWithoutAddedInvitesByInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutAdminInstitutionsInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutAnswersInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutAnswerUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutChallengeMessagesAddedInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
}

input UserCreateWithoutChallengesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutChallengeUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutCoursesAddedInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutCourseUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutInstitutionContactInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutInstitutionInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutInstitutionsAddedInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutInstitutionUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutInvitesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutInvitesSentInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutInvitesSentToInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutPanelsAddedInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutQuestionChoiceAddedByInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutQuestionChoiceUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutQuestionsAddedByInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutQuestionsSentToInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutQuestionUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutSentToSequencesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutSequencesAddedInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutStudentCoursesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutStudentInstitutionsInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutTeacherCoursesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutTeacherInstitutionsInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutTestsAddedInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutTestSequenceInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutTestUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutUpdatedByInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutUsedTestSequenceInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  userUpdates: UserCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

input UserCreateWithoutUserUpdatesInput {
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserCreatestudentIdsInput
  teacherIds: UserCreateteacherIdsInput
  invites: CourseCreateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionCreateManyWithoutAdminsInput
  teacherInstitutions: InstitutionCreateManyWithoutTeachersInput
  studentInstitutions: InstitutionCreateManyWithoutStudentsInput
  institution: InstitutionCreateOneWithoutUsersInput
  updatedBy: UserCreateOneWithoutUserUpdatesInput
  institutionContact: InstitutionCreateManyWithoutContactsInput
  teacherCourses: CourseCreateManyWithoutTeachersInput
  studentCourses: CourseCreateManyWithoutStudentsInput
  answers: AnswerCreateManyWithoutAddedByInput
  questions: QuestionCreateManyInput
  challenges: ChallengeCreateManyWithoutAddedByInput
  testSequence: SequenceCreateManyWithoutStudentsInput
  usedTestSequence: SequenceCreateManyWithoutUsedStudentsInput
  coursesAdded: CourseCreateManyWithoutAddedByInput
  testsAdded: TestCreateManyWithoutAddedByInput
  panelsAdded: PanelCreateManyWithoutAddedByInput
  institutionsAdded: InstitutionCreateManyWithoutAddedByInput
  institutionUpdates: InstitutionCreateManyWithoutUpdatedByInput
  courseUpdates: CourseCreateManyWithoutUpdatedByInput
  testUpdates: TestCreateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionCreateManyWithoutAddedByInput
  questionUpdates: QuestionCreateManyWithoutUpdatedByInput
  answerUpdates: AnswerCreateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceCreateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceCreateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeCreateManyWithoutUpdatedByInput
  questionsSentTo: QuestionCreateManyWithoutSentToInput
  sequencesAdded: SequenceCreateManyWithoutAddedByInput
  sentToSequences: SequenceCreateManyWithoutSentToInput
  invitesSent: CourseCreateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionCreateOneInput
  invitesSentTo: CourseInviteCreateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteCreateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageCreateManyWithoutAddedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  salutation_ASC
  salutation_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  title_ASC
  title_DESC
  department_ASC
  department_DESC
  address1_ASC
  address1_DESC
  address2_ASC
  address2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  phone_ASC
  phone_DESC
  lastLogin_ASC
  lastLogin_DESC
  signUpDate_ASC
  signUpDate_DESC
  online_ASC
  online_DESC
  touchIdEnabled_ASC
  touchIdEnabled_DESC
  pushToken_ASC
  pushToken_DESC
  updateDate_ASC
  updateDate_DESC
  resetToken_ASC
  resetToken_DESC
  confirmationToken_ASC
  confirmationToken_DESC
  tokenExpirationTime_ASC
  tokenExpirationTime_DESC
  confirmed_ASC
  confirmed_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  salutation: String
  firstName: String!
  lastName: String!
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  studentIds: [String!]!
  teacherIds: [String!]!
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  salutation: String

  """All values that are not equal to given value."""
  salutation_not: String

  """All values that are contained in given list."""
  salutation_in: [String!]

  """All values that are not contained in given list."""
  salutation_not_in: [String!]

  """All values less than the given value."""
  salutation_lt: String

  """All values less than or equal the given value."""
  salutation_lte: String

  """All values greater than the given value."""
  salutation_gt: String

  """All values greater than or equal the given value."""
  salutation_gte: String

  """All values containing the given string."""
  salutation_contains: String

  """All values not containing the given string."""
  salutation_not_contains: String

  """All values starting with the given string."""
  salutation_starts_with: String

  """All values not starting with the given string."""
  salutation_not_starts_with: String

  """All values ending with the given string."""
  salutation_ends_with: String

  """All values not ending with the given string."""
  salutation_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  department: String

  """All values that are not equal to given value."""
  department_not: String

  """All values that are contained in given list."""
  department_in: [String!]

  """All values that are not contained in given list."""
  department_not_in: [String!]

  """All values less than the given value."""
  department_lt: String

  """All values less than or equal the given value."""
  department_lte: String

  """All values greater than the given value."""
  department_gt: String

  """All values greater than or equal the given value."""
  department_gte: String

  """All values containing the given string."""
  department_contains: String

  """All values not containing the given string."""
  department_not_contains: String

  """All values starting with the given string."""
  department_starts_with: String

  """All values not starting with the given string."""
  department_not_starts_with: String

  """All values ending with the given string."""
  department_ends_with: String

  """All values not ending with the given string."""
  department_not_ends_with: String
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  lastLogin: DateTime

  """All values that are not equal to given value."""
  lastLogin_not: DateTime

  """All values that are contained in given list."""
  lastLogin_in: [DateTime!]

  """All values that are not contained in given list."""
  lastLogin_not_in: [DateTime!]

  """All values less than the given value."""
  lastLogin_lt: DateTime

  """All values less than or equal the given value."""
  lastLogin_lte: DateTime

  """All values greater than the given value."""
  lastLogin_gt: DateTime

  """All values greater than or equal the given value."""
  lastLogin_gte: DateTime
  signUpDate: DateTime

  """All values that are not equal to given value."""
  signUpDate_not: DateTime

  """All values that are contained in given list."""
  signUpDate_in: [DateTime!]

  """All values that are not contained in given list."""
  signUpDate_not_in: [DateTime!]

  """All values less than the given value."""
  signUpDate_lt: DateTime

  """All values less than or equal the given value."""
  signUpDate_lte: DateTime

  """All values greater than the given value."""
  signUpDate_gt: DateTime

  """All values greater than or equal the given value."""
  signUpDate_gte: DateTime
  online: Boolean

  """All values that are not equal to given value."""
  online_not: Boolean
  touchIdEnabled: Boolean

  """All values that are not equal to given value."""
  touchIdEnabled_not: Boolean
  pushToken: String

  """All values that are not equal to given value."""
  pushToken_not: String

  """All values that are contained in given list."""
  pushToken_in: [String!]

  """All values that are not contained in given list."""
  pushToken_not_in: [String!]

  """All values less than the given value."""
  pushToken_lt: String

  """All values less than or equal the given value."""
  pushToken_lte: String

  """All values greater than the given value."""
  pushToken_gt: String

  """All values greater than or equal the given value."""
  pushToken_gte: String

  """All values containing the given string."""
  pushToken_contains: String

  """All values not containing the given string."""
  pushToken_not_contains: String

  """All values starting with the given string."""
  pushToken_starts_with: String

  """All values not starting with the given string."""
  pushToken_not_starts_with: String

  """All values ending with the given string."""
  pushToken_ends_with: String

  """All values not ending with the given string."""
  pushToken_not_ends_with: String
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  confirmationToken: String

  """All values that are not equal to given value."""
  confirmationToken_not: String

  """All values that are contained in given list."""
  confirmationToken_in: [String!]

  """All values that are not contained in given list."""
  confirmationToken_not_in: [String!]

  """All values less than the given value."""
  confirmationToken_lt: String

  """All values less than or equal the given value."""
  confirmationToken_lte: String

  """All values greater than the given value."""
  confirmationToken_gt: String

  """All values greater than or equal the given value."""
  confirmationToken_gte: String

  """All values containing the given string."""
  confirmationToken_contains: String

  """All values not containing the given string."""
  confirmationToken_not_contains: String

  """All values starting with the given string."""
  confirmationToken_starts_with: String

  """All values not starting with the given string."""
  confirmationToken_not_starts_with: String

  """All values ending with the given string."""
  confirmationToken_ends_with: String

  """All values not ending with the given string."""
  confirmationToken_not_ends_with: String
  tokenExpirationTime: DateTime

  """All values that are not equal to given value."""
  tokenExpirationTime_not: DateTime

  """All values that are contained in given list."""
  tokenExpirationTime_in: [DateTime!]

  """All values that are not contained in given list."""
  tokenExpirationTime_not_in: [DateTime!]

  """All values less than the given value."""
  tokenExpirationTime_lt: DateTime

  """All values less than or equal the given value."""
  tokenExpirationTime_lte: DateTime

  """All values greater than the given value."""
  tokenExpirationTime_gt: DateTime

  """All values greater than or equal the given value."""
  tokenExpirationTime_gte: DateTime
  confirmed: Boolean

  """All values that are not equal to given value."""
  confirmed_not: Boolean
  role: UserType

  """All values that are not equal to given value."""
  role_not: UserType

  """All values that are contained in given list."""
  role_in: [UserType!]

  """All values that are not contained in given list."""
  role_not_in: [UserType!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

enum UserType {
  STUDENT
  TEACHER
  ADMIN
  QUANDRIA
}

input UserUpdateInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateManyDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
}

input UserUpdateManyWithoutAdminInstitutionsInput {
  create: [UserCreateWithoutAdminInstitutionsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAdminInstitutionsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAdminInstitutionsInput!]
}

input UserUpdateManyWithoutInstitutionContactInput {
  create: [UserCreateWithoutInstitutionContactInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInstitutionContactInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInstitutionContactInput!]
}

input UserUpdateManyWithoutInstitutionInput {
  create: [UserCreateWithoutInstitutionInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInstitutionInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input UserUpdateManyWithoutInvitesInput {
  create: [UserCreateWithoutInvitesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInvitesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInvitesInput!]
}

input UserUpdateManyWithoutStudentCoursesInput {
  create: [UserCreateWithoutStudentCoursesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutStudentCoursesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutStudentCoursesInput!]
}

input UserUpdateManyWithoutStudentInstitutionsInput {
  create: [UserCreateWithoutStudentInstitutionsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutStudentInstitutionsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutStudentInstitutionsInput!]
}

input UserUpdateManyWithoutTeacherCoursesInput {
  create: [UserCreateWithoutTeacherCoursesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeacherCoursesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeacherCoursesInput!]
}

input UserUpdateManyWithoutTeacherInstitutionsInput {
  create: [UserCreateWithoutTeacherInstitutionsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTeacherInstitutionsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTeacherInstitutionsInput!]
}

input UserUpdateManyWithoutTestSequenceInput {
  create: [UserCreateWithoutTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTestSequenceInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTestSequenceInput!]
}

input UserUpdateManyWithoutUpdatedByInput {
  create: [UserCreateWithoutUpdatedByInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUpdatedByInput!]
}

input UserUpdateManyWithoutUsedTestSequenceInput {
  create: [UserCreateWithoutUsedTestSequenceInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUsedTestSequenceInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUsedTestSequenceInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutAddedInvitesByInput {
  create: UserCreateWithoutAddedInvitesByInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAddedInvitesByDataInput
  upsert: UserUpsertWithoutAddedInvitesByInput
}

input UserUpdateOneRequiredWithoutAnswersInput {
  create: UserCreateWithoutAnswersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAnswersDataInput
  upsert: UserUpsertWithoutAnswersInput
}

input UserUpdateOneRequiredWithoutChallengeMessagesAddedInput {
  create: UserCreateWithoutChallengeMessagesAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChallengeMessagesAddedDataInput
  upsert: UserUpsertWithoutChallengeMessagesAddedInput
}

input UserUpdateOneRequiredWithoutChallengesInput {
  create: UserCreateWithoutChallengesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChallengesDataInput
  upsert: UserUpsertWithoutChallengesInput
}

input UserUpdateOneRequiredWithoutCoursesAddedInput {
  create: UserCreateWithoutCoursesAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCoursesAddedDataInput
  upsert: UserUpsertWithoutCoursesAddedInput
}

input UserUpdateOneRequiredWithoutInstitutionsAddedInput {
  create: UserCreateWithoutInstitutionsAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutInstitutionsAddedDataInput
  upsert: UserUpsertWithoutInstitutionsAddedInput
}

input UserUpdateOneRequiredWithoutInvitesSentToInput {
  create: UserCreateWithoutInvitesSentToInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutInvitesSentToDataInput
  upsert: UserUpsertWithoutInvitesSentToInput
}

input UserUpdateOneRequiredWithoutPanelsAddedInput {
  create: UserCreateWithoutPanelsAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPanelsAddedDataInput
  upsert: UserUpsertWithoutPanelsAddedInput
}

input UserUpdateOneRequiredWithoutQuestionChoiceAddedByInput {
  create: UserCreateWithoutQuestionChoiceAddedByInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutQuestionChoiceAddedByDataInput
  upsert: UserUpsertWithoutQuestionChoiceAddedByInput
}

input UserUpdateOneRequiredWithoutQuestionsAddedByInput {
  create: UserCreateWithoutQuestionsAddedByInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutQuestionsAddedByDataInput
  upsert: UserUpsertWithoutQuestionsAddedByInput
}

input UserUpdateOneRequiredWithoutSequencesAddedInput {
  create: UserCreateWithoutSequencesAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSequencesAddedDataInput
  upsert: UserUpsertWithoutSequencesAddedInput
}

input UserUpdateOneRequiredWithoutTestsAddedInput {
  create: UserCreateWithoutTestsAddedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTestsAddedDataInput
  upsert: UserUpsertWithoutTestsAddedInput
}

input UserUpdateOneWithoutAnswerUpdatesInput {
  create: UserCreateWithoutAnswerUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutAnswerUpdatesDataInput
  upsert: UserUpsertWithoutAnswerUpdatesInput
}

input UserUpdateOneWithoutChallengeUpdatesInput {
  create: UserCreateWithoutChallengeUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutChallengeUpdatesDataInput
  upsert: UserUpsertWithoutChallengeUpdatesInput
}

input UserUpdateOneWithoutCourseUpdatesInput {
  create: UserCreateWithoutCourseUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCourseUpdatesDataInput
  upsert: UserUpsertWithoutCourseUpdatesInput
}

input UserUpdateOneWithoutInstitutionUpdatesInput {
  create: UserCreateWithoutInstitutionUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInstitutionUpdatesDataInput
  upsert: UserUpsertWithoutInstitutionUpdatesInput
}

input UserUpdateOneWithoutInvitesSentInput {
  create: UserCreateWithoutInvitesSentInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInvitesSentDataInput
  upsert: UserUpsertWithoutInvitesSentInput
}

input UserUpdateOneWithoutQuestionChoiceUpdatesInput {
  create: UserCreateWithoutQuestionChoiceUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionChoiceUpdatesDataInput
  upsert: UserUpsertWithoutQuestionChoiceUpdatesInput
}

input UserUpdateOneWithoutQuestionsSentToInput {
  create: UserCreateWithoutQuestionsSentToInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionsSentToDataInput
  upsert: UserUpsertWithoutQuestionsSentToInput
}

input UserUpdateOneWithoutQuestionUpdatesInput {
  create: UserCreateWithoutQuestionUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutQuestionUpdatesDataInput
  upsert: UserUpsertWithoutQuestionUpdatesInput
}

input UserUpdateOneWithoutSentToSequencesInput {
  create: UserCreateWithoutSentToSequencesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSentToSequencesDataInput
  upsert: UserUpsertWithoutSentToSequencesInput
}

input UserUpdateOneWithoutTestUpdatesInput {
  create: UserCreateWithoutTestUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutTestUpdatesDataInput
  upsert: UserUpsertWithoutTestUpdatesInput
}

input UserUpdateOneWithoutUserUpdatesInput {
  create: UserCreateWithoutUserUpdatesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutUserUpdatesDataInput
  upsert: UserUpsertWithoutUserUpdatesInput
}

input UserUpdatestudentIdsInput {
  set: [String!]
}

input UserUpdateteacherIdsInput {
  set: [String!]
}

input UserUpdateWithoutAddedInvitesByDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutAdminInstitutionsDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutAnswersDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutAnswerUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutChallengeMessagesAddedDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutChallengesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutChallengeUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutCoursesAddedDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutCourseUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutInstitutionContactDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutInstitutionDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutInstitutionsAddedDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutInstitutionUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutInvitesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutInvitesSentDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutInvitesSentToDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutPanelsAddedDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutQuestionChoiceAddedByDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutQuestionChoiceUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutQuestionsAddedByDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutQuestionsSentToDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutQuestionUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutSentToSequencesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutSequencesAddedDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutStudentCoursesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutStudentInstitutionsDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutTeacherCoursesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutTeacherInstitutionsDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutTestsAddedDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutTestSequenceDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutTestUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutUpdatedByDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutUsedTestSequenceDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  userUpdates: UserUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithoutUserUpdatesDataInput {
  email: String
  password: String
  salutation: String
  firstName: String
  lastName: String
  title: String
  department: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  lastLogin: DateTime
  signUpDate: DateTime
  online: Boolean
  touchIdEnabled: Boolean
  pushToken: String
  updateDate: DateTime
  resetToken: String
  confirmationToken: String
  tokenExpirationTime: DateTime
  confirmed: Boolean
  role: UserType
  studentIds: UserUpdatestudentIdsInput
  teacherIds: UserUpdateteacherIdsInput
  invites: CourseUpdateManyWithoutInvitesSentInput
  adminInstitutions: InstitutionUpdateManyWithoutAdminsInput
  teacherInstitutions: InstitutionUpdateManyWithoutTeachersInput
  studentInstitutions: InstitutionUpdateManyWithoutStudentsInput
  institution: InstitutionUpdateOneWithoutUsersInput
  updatedBy: UserUpdateOneWithoutUserUpdatesInput
  institutionContact: InstitutionUpdateManyWithoutContactsInput
  teacherCourses: CourseUpdateManyWithoutTeachersInput
  studentCourses: CourseUpdateManyWithoutStudentsInput
  answers: AnswerUpdateManyWithoutAddedByInput
  questions: QuestionUpdateManyInput
  challenges: ChallengeUpdateManyWithoutAddedByInput
  testSequence: SequenceUpdateManyWithoutStudentsInput
  usedTestSequence: SequenceUpdateManyWithoutUsedStudentsInput
  coursesAdded: CourseUpdateManyWithoutAddedByInput
  testsAdded: TestUpdateManyWithoutAddedByInput
  panelsAdded: PanelUpdateManyWithoutAddedByInput
  institutionsAdded: InstitutionUpdateManyWithoutAddedByInput
  institutionUpdates: InstitutionUpdateManyWithoutUpdatedByInput
  courseUpdates: CourseUpdateManyWithoutUpdatedByInput
  testUpdates: TestUpdateManyWithoutUpdatedByInput
  questionsAddedBy: QuestionUpdateManyWithoutAddedByInput
  questionUpdates: QuestionUpdateManyWithoutUpdatedByInput
  answerUpdates: AnswerUpdateManyWithoutUpdatedByInput
  questionChoiceAddedBy: QuestionChoiceUpdateManyWithoutAddedByInput
  questionChoiceUpdates: QuestionChoiceUpdateManyWithoutUpdatedByInput
  challengeUpdates: ChallengeUpdateManyWithoutUpdatedByInput
  questionsSentTo: QuestionUpdateManyWithoutSentToInput
  sequencesAdded: SequenceUpdateManyWithoutAddedByInput
  sentToSequences: SequenceUpdateManyWithoutSentToInput
  invitesSent: CourseUpdateManyWithoutInvitesSentByInput
  adminInstitution: InstitutionUpdateOneInput
  invitesSentTo: CourseInviteUpdateManyWithoutInviteSentToInput
  addedInvitesBy: CourseInviteUpdateManyWithoutAddedByInput
  challengeMessagesAdded: ChallengeMessageUpdateManyWithoutAddedByInput
}

input UserUpdateWithWhereUniqueWithoutAdminInstitutionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAdminInstitutionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutInstitutionContactInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInstitutionContactDataInput!
}

input UserUpdateWithWhereUniqueWithoutInstitutionInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInstitutionDataInput!
}

input UserUpdateWithWhereUniqueWithoutInvitesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInvitesDataInput!
}

input UserUpdateWithWhereUniqueWithoutStudentCoursesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStudentCoursesDataInput!
}

input UserUpdateWithWhereUniqueWithoutStudentInstitutionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStudentInstitutionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeacherCoursesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeacherCoursesDataInput!
}

input UserUpdateWithWhereUniqueWithoutTeacherInstitutionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTeacherInstitutionsDataInput!
}

input UserUpdateWithWhereUniqueWithoutTestSequenceInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTestSequenceDataInput!
}

input UserUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUpdatedByDataInput!
}

input UserUpdateWithWhereUniqueWithoutUsedTestSequenceInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUsedTestSequenceDataInput!
}

input UserUpsertWithoutAddedInvitesByInput {
  update: UserUpdateWithoutAddedInvitesByDataInput!
  create: UserCreateWithoutAddedInvitesByInput!
}

input UserUpsertWithoutAnswersInput {
  update: UserUpdateWithoutAnswersDataInput!
  create: UserCreateWithoutAnswersInput!
}

input UserUpsertWithoutAnswerUpdatesInput {
  update: UserUpdateWithoutAnswerUpdatesDataInput!
  create: UserCreateWithoutAnswerUpdatesInput!
}

input UserUpsertWithoutChallengeMessagesAddedInput {
  update: UserUpdateWithoutChallengeMessagesAddedDataInput!
  create: UserCreateWithoutChallengeMessagesAddedInput!
}

input UserUpsertWithoutChallengesInput {
  update: UserUpdateWithoutChallengesDataInput!
  create: UserCreateWithoutChallengesInput!
}

input UserUpsertWithoutChallengeUpdatesInput {
  update: UserUpdateWithoutChallengeUpdatesDataInput!
  create: UserCreateWithoutChallengeUpdatesInput!
}

input UserUpsertWithoutCoursesAddedInput {
  update: UserUpdateWithoutCoursesAddedDataInput!
  create: UserCreateWithoutCoursesAddedInput!
}

input UserUpsertWithoutCourseUpdatesInput {
  update: UserUpdateWithoutCourseUpdatesDataInput!
  create: UserCreateWithoutCourseUpdatesInput!
}

input UserUpsertWithoutInstitutionsAddedInput {
  update: UserUpdateWithoutInstitutionsAddedDataInput!
  create: UserCreateWithoutInstitutionsAddedInput!
}

input UserUpsertWithoutInstitutionUpdatesInput {
  update: UserUpdateWithoutInstitutionUpdatesDataInput!
  create: UserCreateWithoutInstitutionUpdatesInput!
}

input UserUpsertWithoutInvitesSentInput {
  update: UserUpdateWithoutInvitesSentDataInput!
  create: UserCreateWithoutInvitesSentInput!
}

input UserUpsertWithoutInvitesSentToInput {
  update: UserUpdateWithoutInvitesSentToDataInput!
  create: UserCreateWithoutInvitesSentToInput!
}

input UserUpsertWithoutPanelsAddedInput {
  update: UserUpdateWithoutPanelsAddedDataInput!
  create: UserCreateWithoutPanelsAddedInput!
}

input UserUpsertWithoutQuestionChoiceAddedByInput {
  update: UserUpdateWithoutQuestionChoiceAddedByDataInput!
  create: UserCreateWithoutQuestionChoiceAddedByInput!
}

input UserUpsertWithoutQuestionChoiceUpdatesInput {
  update: UserUpdateWithoutQuestionChoiceUpdatesDataInput!
  create: UserCreateWithoutQuestionChoiceUpdatesInput!
}

input UserUpsertWithoutQuestionsAddedByInput {
  update: UserUpdateWithoutQuestionsAddedByDataInput!
  create: UserCreateWithoutQuestionsAddedByInput!
}

input UserUpsertWithoutQuestionsSentToInput {
  update: UserUpdateWithoutQuestionsSentToDataInput!
  create: UserCreateWithoutQuestionsSentToInput!
}

input UserUpsertWithoutQuestionUpdatesInput {
  update: UserUpdateWithoutQuestionUpdatesDataInput!
  create: UserCreateWithoutQuestionUpdatesInput!
}

input UserUpsertWithoutSentToSequencesInput {
  update: UserUpdateWithoutSentToSequencesDataInput!
  create: UserCreateWithoutSentToSequencesInput!
}

input UserUpsertWithoutSequencesAddedInput {
  update: UserUpdateWithoutSequencesAddedDataInput!
  create: UserCreateWithoutSequencesAddedInput!
}

input UserUpsertWithoutTestsAddedInput {
  update: UserUpdateWithoutTestsAddedDataInput!
  create: UserCreateWithoutTestsAddedInput!
}

input UserUpsertWithoutTestUpdatesInput {
  update: UserUpdateWithoutTestUpdatesDataInput!
  create: UserCreateWithoutTestUpdatesInput!
}

input UserUpsertWithoutUserUpdatesInput {
  update: UserUpdateWithoutUserUpdatesDataInput!
  create: UserCreateWithoutUserUpdatesInput!
}

input UserUpsertWithWhereUniqueWithoutAdminInstitutionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAdminInstitutionsDataInput!
  create: UserCreateWithoutAdminInstitutionsInput!
}

input UserUpsertWithWhereUniqueWithoutInstitutionContactInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInstitutionContactDataInput!
  create: UserCreateWithoutInstitutionContactInput!
}

input UserUpsertWithWhereUniqueWithoutInstitutionInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInstitutionDataInput!
  create: UserCreateWithoutInstitutionInput!
}

input UserUpsertWithWhereUniqueWithoutInvitesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInvitesDataInput!
  create: UserCreateWithoutInvitesInput!
}

input UserUpsertWithWhereUniqueWithoutStudentCoursesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStudentCoursesDataInput!
  create: UserCreateWithoutStudentCoursesInput!
}

input UserUpsertWithWhereUniqueWithoutStudentInstitutionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStudentInstitutionsDataInput!
  create: UserCreateWithoutStudentInstitutionsInput!
}

input UserUpsertWithWhereUniqueWithoutTeacherCoursesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeacherCoursesDataInput!
  create: UserCreateWithoutTeacherCoursesInput!
}

input UserUpsertWithWhereUniqueWithoutTeacherInstitutionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTeacherInstitutionsDataInput!
  create: UserCreateWithoutTeacherInstitutionsInput!
}

input UserUpsertWithWhereUniqueWithoutTestSequenceInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTestSequenceDataInput!
  create: UserCreateWithoutTestSequenceInput!
}

input UserUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUpdatedByDataInput!
  create: UserCreateWithoutUpdatedByInput!
}

input UserUpsertWithWhereUniqueWithoutUsedTestSequenceInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUsedTestSequenceDataInput!
  create: UserCreateWithoutUsedTestSequenceInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  salutation: String

  """All values that are not equal to given value."""
  salutation_not: String

  """All values that are contained in given list."""
  salutation_in: [String!]

  """All values that are not contained in given list."""
  salutation_not_in: [String!]

  """All values less than the given value."""
  salutation_lt: String

  """All values less than or equal the given value."""
  salutation_lte: String

  """All values greater than the given value."""
  salutation_gt: String

  """All values greater than or equal the given value."""
  salutation_gte: String

  """All values containing the given string."""
  salutation_contains: String

  """All values not containing the given string."""
  salutation_not_contains: String

  """All values starting with the given string."""
  salutation_starts_with: String

  """All values not starting with the given string."""
  salutation_not_starts_with: String

  """All values ending with the given string."""
  salutation_ends_with: String

  """All values not ending with the given string."""
  salutation_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  department: String

  """All values that are not equal to given value."""
  department_not: String

  """All values that are contained in given list."""
  department_in: [String!]

  """All values that are not contained in given list."""
  department_not_in: [String!]

  """All values less than the given value."""
  department_lt: String

  """All values less than or equal the given value."""
  department_lte: String

  """All values greater than the given value."""
  department_gt: String

  """All values greater than or equal the given value."""
  department_gte: String

  """All values containing the given string."""
  department_contains: String

  """All values not containing the given string."""
  department_not_contains: String

  """All values starting with the given string."""
  department_starts_with: String

  """All values not starting with the given string."""
  department_not_starts_with: String

  """All values ending with the given string."""
  department_ends_with: String

  """All values not ending with the given string."""
  department_not_ends_with: String
  address1: String

  """All values that are not equal to given value."""
  address1_not: String

  """All values that are contained in given list."""
  address1_in: [String!]

  """All values that are not contained in given list."""
  address1_not_in: [String!]

  """All values less than the given value."""
  address1_lt: String

  """All values less than or equal the given value."""
  address1_lte: String

  """All values greater than the given value."""
  address1_gt: String

  """All values greater than or equal the given value."""
  address1_gte: String

  """All values containing the given string."""
  address1_contains: String

  """All values not containing the given string."""
  address1_not_contains: String

  """All values starting with the given string."""
  address1_starts_with: String

  """All values not starting with the given string."""
  address1_not_starts_with: String

  """All values ending with the given string."""
  address1_ends_with: String

  """All values not ending with the given string."""
  address1_not_ends_with: String
  address2: String

  """All values that are not equal to given value."""
  address2_not: String

  """All values that are contained in given list."""
  address2_in: [String!]

  """All values that are not contained in given list."""
  address2_not_in: [String!]

  """All values less than the given value."""
  address2_lt: String

  """All values less than or equal the given value."""
  address2_lte: String

  """All values greater than the given value."""
  address2_gt: String

  """All values greater than or equal the given value."""
  address2_gte: String

  """All values containing the given string."""
  address2_contains: String

  """All values not containing the given string."""
  address2_not_contains: String

  """All values starting with the given string."""
  address2_starts_with: String

  """All values not starting with the given string."""
  address2_not_starts_with: String

  """All values ending with the given string."""
  address2_ends_with: String

  """All values not ending with the given string."""
  address2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  lastLogin: DateTime

  """All values that are not equal to given value."""
  lastLogin_not: DateTime

  """All values that are contained in given list."""
  lastLogin_in: [DateTime!]

  """All values that are not contained in given list."""
  lastLogin_not_in: [DateTime!]

  """All values less than the given value."""
  lastLogin_lt: DateTime

  """All values less than or equal the given value."""
  lastLogin_lte: DateTime

  """All values greater than the given value."""
  lastLogin_gt: DateTime

  """All values greater than or equal the given value."""
  lastLogin_gte: DateTime
  signUpDate: DateTime

  """All values that are not equal to given value."""
  signUpDate_not: DateTime

  """All values that are contained in given list."""
  signUpDate_in: [DateTime!]

  """All values that are not contained in given list."""
  signUpDate_not_in: [DateTime!]

  """All values less than the given value."""
  signUpDate_lt: DateTime

  """All values less than or equal the given value."""
  signUpDate_lte: DateTime

  """All values greater than the given value."""
  signUpDate_gt: DateTime

  """All values greater than or equal the given value."""
  signUpDate_gte: DateTime
  online: Boolean

  """All values that are not equal to given value."""
  online_not: Boolean
  touchIdEnabled: Boolean

  """All values that are not equal to given value."""
  touchIdEnabled_not: Boolean
  pushToken: String

  """All values that are not equal to given value."""
  pushToken_not: String

  """All values that are contained in given list."""
  pushToken_in: [String!]

  """All values that are not contained in given list."""
  pushToken_not_in: [String!]

  """All values less than the given value."""
  pushToken_lt: String

  """All values less than or equal the given value."""
  pushToken_lte: String

  """All values greater than the given value."""
  pushToken_gt: String

  """All values greater than or equal the given value."""
  pushToken_gte: String

  """All values containing the given string."""
  pushToken_contains: String

  """All values not containing the given string."""
  pushToken_not_contains: String

  """All values starting with the given string."""
  pushToken_starts_with: String

  """All values not starting with the given string."""
  pushToken_not_starts_with: String

  """All values ending with the given string."""
  pushToken_ends_with: String

  """All values not ending with the given string."""
  pushToken_not_ends_with: String
  updateDate: DateTime

  """All values that are not equal to given value."""
  updateDate_not: DateTime

  """All values that are contained in given list."""
  updateDate_in: [DateTime!]

  """All values that are not contained in given list."""
  updateDate_not_in: [DateTime!]

  """All values less than the given value."""
  updateDate_lt: DateTime

  """All values less than or equal the given value."""
  updateDate_lte: DateTime

  """All values greater than the given value."""
  updateDate_gt: DateTime

  """All values greater than or equal the given value."""
  updateDate_gte: DateTime
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  confirmationToken: String

  """All values that are not equal to given value."""
  confirmationToken_not: String

  """All values that are contained in given list."""
  confirmationToken_in: [String!]

  """All values that are not contained in given list."""
  confirmationToken_not_in: [String!]

  """All values less than the given value."""
  confirmationToken_lt: String

  """All values less than or equal the given value."""
  confirmationToken_lte: String

  """All values greater than the given value."""
  confirmationToken_gt: String

  """All values greater than or equal the given value."""
  confirmationToken_gte: String

  """All values containing the given string."""
  confirmationToken_contains: String

  """All values not containing the given string."""
  confirmationToken_not_contains: String

  """All values starting with the given string."""
  confirmationToken_starts_with: String

  """All values not starting with the given string."""
  confirmationToken_not_starts_with: String

  """All values ending with the given string."""
  confirmationToken_ends_with: String

  """All values not ending with the given string."""
  confirmationToken_not_ends_with: String
  tokenExpirationTime: DateTime

  """All values that are not equal to given value."""
  tokenExpirationTime_not: DateTime

  """All values that are contained in given list."""
  tokenExpirationTime_in: [DateTime!]

  """All values that are not contained in given list."""
  tokenExpirationTime_not_in: [DateTime!]

  """All values less than the given value."""
  tokenExpirationTime_lt: DateTime

  """All values less than or equal the given value."""
  tokenExpirationTime_lte: DateTime

  """All values greater than the given value."""
  tokenExpirationTime_gt: DateTime

  """All values greater than or equal the given value."""
  tokenExpirationTime_gte: DateTime
  confirmed: Boolean

  """All values that are not equal to given value."""
  confirmed_not: Boolean
  role: UserType

  """All values that are not equal to given value."""
  role_not: UserType

  """All values that are contained in given list."""
  role_in: [UserType!]

  """All values that are not contained in given list."""
  role_not_in: [UserType!]
  invites_every: CourseWhereInput
  invites_some: CourseWhereInput
  invites_none: CourseWhereInput
  adminInstitutions_every: InstitutionWhereInput
  adminInstitutions_some: InstitutionWhereInput
  adminInstitutions_none: InstitutionWhereInput
  teacherInstitutions_every: InstitutionWhereInput
  teacherInstitutions_some: InstitutionWhereInput
  teacherInstitutions_none: InstitutionWhereInput
  studentInstitutions_every: InstitutionWhereInput
  studentInstitutions_some: InstitutionWhereInput
  studentInstitutions_none: InstitutionWhereInput
  institution: InstitutionWhereInput
  updatedBy: UserWhereInput
  institutionContact_every: InstitutionWhereInput
  institutionContact_some: InstitutionWhereInput
  institutionContact_none: InstitutionWhereInput
  teacherCourses_every: CourseWhereInput
  teacherCourses_some: CourseWhereInput
  teacherCourses_none: CourseWhereInput
  studentCourses_every: CourseWhereInput
  studentCourses_some: CourseWhereInput
  studentCourses_none: CourseWhereInput
  answers_every: AnswerWhereInput
  answers_some: AnswerWhereInput
  answers_none: AnswerWhereInput
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  challenges_every: ChallengeWhereInput
  challenges_some: ChallengeWhereInput
  challenges_none: ChallengeWhereInput
  testSequence_every: SequenceWhereInput
  testSequence_some: SequenceWhereInput
  testSequence_none: SequenceWhereInput
  usedTestSequence_every: SequenceWhereInput
  usedTestSequence_some: SequenceWhereInput
  usedTestSequence_none: SequenceWhereInput
  coursesAdded_every: CourseWhereInput
  coursesAdded_some: CourseWhereInput
  coursesAdded_none: CourseWhereInput
  testsAdded_every: TestWhereInput
  testsAdded_some: TestWhereInput
  testsAdded_none: TestWhereInput
  panelsAdded_every: PanelWhereInput
  panelsAdded_some: PanelWhereInput
  panelsAdded_none: PanelWhereInput
  institutionsAdded_every: InstitutionWhereInput
  institutionsAdded_some: InstitutionWhereInput
  institutionsAdded_none: InstitutionWhereInput
  institutionUpdates_every: InstitutionWhereInput
  institutionUpdates_some: InstitutionWhereInput
  institutionUpdates_none: InstitutionWhereInput
  courseUpdates_every: CourseWhereInput
  courseUpdates_some: CourseWhereInput
  courseUpdates_none: CourseWhereInput
  testUpdates_every: TestWhereInput
  testUpdates_some: TestWhereInput
  testUpdates_none: TestWhereInput
  questionsAddedBy_every: QuestionWhereInput
  questionsAddedBy_some: QuestionWhereInput
  questionsAddedBy_none: QuestionWhereInput
  questionUpdates_every: QuestionWhereInput
  questionUpdates_some: QuestionWhereInput
  questionUpdates_none: QuestionWhereInput
  answerUpdates_every: AnswerWhereInput
  answerUpdates_some: AnswerWhereInput
  answerUpdates_none: AnswerWhereInput
  questionChoiceAddedBy_every: QuestionChoiceWhereInput
  questionChoiceAddedBy_some: QuestionChoiceWhereInput
  questionChoiceAddedBy_none: QuestionChoiceWhereInput
  questionChoiceUpdates_every: QuestionChoiceWhereInput
  questionChoiceUpdates_some: QuestionChoiceWhereInput
  questionChoiceUpdates_none: QuestionChoiceWhereInput
  challengeUpdates_every: ChallengeWhereInput
  challengeUpdates_some: ChallengeWhereInput
  challengeUpdates_none: ChallengeWhereInput
  userUpdates_every: UserWhereInput
  userUpdates_some: UserWhereInput
  userUpdates_none: UserWhereInput
  questionsSentTo_every: QuestionWhereInput
  questionsSentTo_some: QuestionWhereInput
  questionsSentTo_none: QuestionWhereInput
  sequencesAdded_every: SequenceWhereInput
  sequencesAdded_some: SequenceWhereInput
  sequencesAdded_none: SequenceWhereInput
  sentToSequences_every: SequenceWhereInput
  sentToSequences_some: SequenceWhereInput
  sentToSequences_none: SequenceWhereInput
  invitesSent_every: CourseWhereInput
  invitesSent_some: CourseWhereInput
  invitesSent_none: CourseWhereInput
  adminInstitution: InstitutionWhereInput
  invitesSentTo_every: CourseInviteWhereInput
  invitesSentTo_some: CourseInviteWhereInput
  invitesSentTo_none: CourseInviteWhereInput
  addedInvitesBy_every: CourseInviteWhereInput
  addedInvitesBy_some: CourseInviteWhereInput
  addedInvitesBy_none: CourseInviteWhereInput
  challengeMessagesAdded_every: ChallengeMessageWhereInput
  challengeMessagesAdded_some: ChallengeMessageWhereInput
  challengeMessagesAdded_none: ChallengeMessageWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
